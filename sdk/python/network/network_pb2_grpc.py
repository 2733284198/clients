# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from network import network_pb2 as network_dot_network__pb2


class NetworkStub(object):
  """Network service is usesd to gain visibility into networks
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Connect = channel.unary_unary(
        '/go.micro.network.Network/Connect',
        request_serializer=network_dot_network__pb2.ConnectRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.ConnectResponse.FromString,
        )
    self.Graph = channel.unary_unary(
        '/go.micro.network.Network/Graph',
        request_serializer=network_dot_network__pb2.GraphRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.GraphResponse.FromString,
        )
    self.Nodes = channel.unary_unary(
        '/go.micro.network.Network/Nodes',
        request_serializer=network_dot_network__pb2.NodesRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.NodesResponse.FromString,
        )
    self.Routes = channel.unary_unary(
        '/go.micro.network.Network/Routes',
        request_serializer=network_dot_network__pb2.RoutesRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.RoutesResponse.FromString,
        )
    self.Services = channel.unary_unary(
        '/go.micro.network.Network/Services',
        request_serializer=network_dot_network__pb2.ServicesRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.ServicesResponse.FromString,
        )
    self.Status = channel.unary_unary(
        '/go.micro.network.Network/Status',
        request_serializer=network_dot_network__pb2.StatusRequest.SerializeToString,
        response_deserializer=network_dot_network__pb2.StatusResponse.FromString,
        )


class NetworkServicer(object):
  """Network service is usesd to gain visibility into networks
  """

  def Connect(self, request, context):
    """Connect to the network
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Graph(self, request, context):
    """Returns the entire network graph
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Nodes(self, request, context):
    """Returns a list of known nodes in the network
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Routes(self, request, context):
    """Returns a list of known routes in the network
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Services(self, request, context):
    """Returns a list of known services based on routes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Status(self, request, context):
    """Status returns network status
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NetworkServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Connect': grpc.unary_unary_rpc_method_handler(
          servicer.Connect,
          request_deserializer=network_dot_network__pb2.ConnectRequest.FromString,
          response_serializer=network_dot_network__pb2.ConnectResponse.SerializeToString,
      ),
      'Graph': grpc.unary_unary_rpc_method_handler(
          servicer.Graph,
          request_deserializer=network_dot_network__pb2.GraphRequest.FromString,
          response_serializer=network_dot_network__pb2.GraphResponse.SerializeToString,
      ),
      'Nodes': grpc.unary_unary_rpc_method_handler(
          servicer.Nodes,
          request_deserializer=network_dot_network__pb2.NodesRequest.FromString,
          response_serializer=network_dot_network__pb2.NodesResponse.SerializeToString,
      ),
      'Routes': grpc.unary_unary_rpc_method_handler(
          servicer.Routes,
          request_deserializer=network_dot_network__pb2.RoutesRequest.FromString,
          response_serializer=network_dot_network__pb2.RoutesResponse.SerializeToString,
      ),
      'Services': grpc.unary_unary_rpc_method_handler(
          servicer.Services,
          request_deserializer=network_dot_network__pb2.ServicesRequest.FromString,
          response_serializer=network_dot_network__pb2.ServicesResponse.SerializeToString,
      ),
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=network_dot_network__pb2.StatusRequest.FromString,
          response_serializer=network_dot_network__pb2.StatusResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'go.micro.network.Network', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
