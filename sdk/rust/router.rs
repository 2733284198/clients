// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `router/router.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResponse {
    // message fields
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResponse {
    fn default() -> &'a ListResponse {
        <ListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResponse {
    pub fn new() -> ListResponse {
        ::std::default::Default::default()
    }

    // repeated .go.micro.router.Route routes = 1;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResponse {
        ListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &ListResponse| { &m.routes },
                |m: &mut ListResponse| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResponse>(
                "ListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListResponse {
        static instance: ::protobuf::rt::LazyV2<ListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListResponse::new)
    }
}

impl ::protobuf::Clear for ListResponse {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupRequest {
    // message fields
    pub query: ::protobuf::SingularPtrField<Query>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupRequest {
    fn default() -> &'a LookupRequest {
        <LookupRequest as ::protobuf::Message>::default_instance()
    }
}

impl LookupRequest {
    pub fn new() -> LookupRequest {
        ::std::default::Default::default()
    }

    // .go.micro.router.Query query = 1;


    pub fn get_query(&self) -> &Query {
        self.query.as_ref().unwrap_or_else(|| <Query as ::protobuf::Message>::default_instance())
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    pub fn has_query(&self) -> bool {
        self.query.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: Query) {
        self.query = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut Query {
        if self.query.is_none() {
            self.query.set_default();
        }
        self.query.as_mut().unwrap()
    }

    // Take field
    pub fn take_query(&mut self) -> Query {
        self.query.take().unwrap_or_else(|| Query::new())
    }
}

impl ::protobuf::Message for LookupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.query {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.query.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupRequest {
        LookupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query>>(
                "query",
                |m: &LookupRequest| { &m.query },
                |m: &mut LookupRequest| { &mut m.query },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LookupRequest>(
                "LookupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LookupRequest {
        static instance: ::protobuf::rt::LazyV2<LookupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LookupRequest::new)
    }
}

impl ::protobuf::Clear for LookupRequest {
    fn clear(&mut self) {
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupResponse {
    // message fields
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupResponse {
    fn default() -> &'a LookupResponse {
        <LookupResponse as ::protobuf::Message>::default_instance()
    }
}

impl LookupResponse {
    pub fn new() -> LookupResponse {
        ::std::default::Default::default()
    }

    // repeated .go.micro.router.Route routes = 1;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LookupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupResponse {
        LookupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &LookupResponse| { &m.routes },
                |m: &mut LookupResponse| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LookupResponse>(
                "LookupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LookupResponse {
        static instance: ::protobuf::rt::LazyV2<LookupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LookupResponse::new)
    }
}

impl ::protobuf::Clear for LookupResponse {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRequest {
    // message fields
    pub query: ::protobuf::SingularPtrField<Query>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRequest {
    fn default() -> &'a QueryRequest {
        <QueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRequest {
    pub fn new() -> QueryRequest {
        ::std::default::Default::default()
    }

    // .go.micro.router.Query query = 1;


    pub fn get_query(&self) -> &Query {
        self.query.as_ref().unwrap_or_else(|| <Query as ::protobuf::Message>::default_instance())
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    pub fn has_query(&self) -> bool {
        self.query.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: Query) {
        self.query = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut Query {
        if self.query.is_none() {
            self.query.set_default();
        }
        self.query.as_mut().unwrap()
    }

    // Take field
    pub fn take_query(&mut self) -> Query {
        self.query.take().unwrap_or_else(|| Query::new())
    }
}

impl ::protobuf::Message for QueryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.query {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.query.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRequest {
        QueryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query>>(
                "query",
                |m: &QueryRequest| { &m.query },
                |m: &mut QueryRequest| { &mut m.query },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRequest>(
                "QueryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRequest {
        static instance: ::protobuf::rt::LazyV2<QueryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRequest::new)
    }
}

impl ::protobuf::Clear for QueryRequest {
    fn clear(&mut self) {
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryResponse {
    // message fields
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    // repeated .go.micro.router.Route routes = 1;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &QueryResponse| { &m.routes },
                |m: &mut QueryResponse| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryResponse>(
                "QueryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: ::protobuf::rt::LazyV2<QueryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryResponse::new)
    }
}

impl ::protobuf::Clear for QueryResponse {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WatchRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WatchRequest {
    fn default() -> &'a WatchRequest {
        <WatchRequest as ::protobuf::Message>::default_instance()
    }
}

impl WatchRequest {
    pub fn new() -> WatchRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WatchRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WatchRequest {
        WatchRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WatchRequest>(
                "WatchRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WatchRequest {
        static instance: ::protobuf::rt::LazyV2<WatchRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WatchRequest::new)
    }
}

impl ::protobuf::Clear for WatchRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WatchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WatchRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Advert {
    // message fields
    pub id: ::std::string::String,
    pub field_type: AdvertType,
    pub timestamp: i64,
    pub ttl: i64,
    pub events: ::protobuf::RepeatedField<Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Advert {
    fn default() -> &'a Advert {
        <Advert as ::protobuf::Message>::default_instance()
    }
}

impl Advert {
    pub fn new() -> Advert {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .go.micro.router.AdvertType type = 2;


    pub fn get_field_type(&self) -> AdvertType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = AdvertType::AdvertAnnounce;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: AdvertType) {
        self.field_type = v;
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // int64 ttl = 4;


    pub fn get_ttl(&self) -> i64 {
        self.ttl
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: i64) {
        self.ttl = v;
    }

    // repeated .go.micro.router.Event events = 5;


    pub fn get_events(&self) -> &[Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Advert {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ttl = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.field_type != AdvertType::AdvertAnnounce {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.field_type != AdvertType::AdvertAnnounce {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        if self.ttl != 0 {
            os.write_int64(4, self.ttl)?;
        }
        for v in &self.events {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Advert {
        Advert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Advert| { &m.id },
                |m: &mut Advert| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AdvertType>>(
                "type",
                |m: &Advert| { &m.field_type },
                |m: &mut Advert| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Advert| { &m.timestamp },
                |m: &mut Advert| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ttl",
                |m: &Advert| { &m.ttl },
                |m: &mut Advert| { &mut m.ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "events",
                |m: &Advert| { &m.events },
                |m: &mut Advert| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Advert>(
                "Advert",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Advert {
        static instance: ::protobuf::rt::LazyV2<Advert> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Advert::new)
    }
}

impl ::protobuf::Clear for Advert {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type = AdvertType::AdvertAnnounce;
        self.timestamp = 0;
        self.ttl = 0;
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Advert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Advert {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProcessResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProcessResponse {
    fn default() -> &'a ProcessResponse {
        <ProcessResponse as ::protobuf::Message>::default_instance()
    }
}

impl ProcessResponse {
    pub fn new() -> ProcessResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ProcessResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProcessResponse {
        ProcessResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProcessResponse>(
                "ProcessResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProcessResponse {
        static instance: ::protobuf::rt::LazyV2<ProcessResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProcessResponse::new)
    }
}

impl ::protobuf::Clear for ProcessResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProcessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResponse {
    fn default() -> &'a CreateResponse {
        <CreateResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResponse {
    pub fn new() -> CreateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResponse {
        CreateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResponse>(
                "CreateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateResponse {
        static instance: ::protobuf::rt::LazyV2<CreateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateResponse::new)
    }
}

impl ::protobuf::Clear for CreateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResponse>(
                "DeleteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteResponse::new)
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateResponse {
    fn default() -> &'a UpdateResponse {
        <UpdateResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateResponse {
    pub fn new() -> UpdateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateResponse {
        UpdateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateResponse>(
                "UpdateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateResponse {
        static instance: ::protobuf::rt::LazyV2<UpdateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateResponse::new)
    }
}

impl ::protobuf::Clear for UpdateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub id: ::std::string::String,
    pub field_type: EventType,
    pub timestamp: i64,
    pub route: ::protobuf::SingularPtrField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .go.micro.router.EventType type = 2;


    pub fn get_field_type(&self) -> EventType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = EventType::Create;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EventType) {
        self.field_type = v;
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // .go.micro.router.Route route = 4;


    pub fn get_route(&self) -> &Route {
        self.route.as_ref().unwrap_or_else(|| <Route as ::protobuf::Message>::default_instance())
    }
    pub fn clear_route(&mut self) {
        self.route.clear();
    }

    pub fn has_route(&self) -> bool {
        self.route.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route(&mut self, v: Route) {
        self.route = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route(&mut self) -> &mut Route {
        if self.route.is_none() {
            self.route.set_default();
        }
        self.route.as_mut().unwrap()
    }

    // Take field
    pub fn take_route(&mut self) -> Route {
        self.route.take().unwrap_or_else(|| Route::new())
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        for v in &self.route {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.route)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.field_type != EventType::Create {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.field_type != EventType::Create {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        if let Some(ref v) = self.route.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Event| { &m.id },
                |m: &mut Event| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                "type",
                |m: &Event| { &m.field_type },
                |m: &mut Event| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Event| { &m.timestamp },
                |m: &mut Event| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "route",
                |m: &Event| { &m.route },
                |m: &mut Event| { &mut m.route },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type = EventType::Create;
        self.timestamp = 0;
        self.route.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query {
    // message fields
    pub service: ::std::string::String,
    pub gateway: ::std::string::String,
    pub network: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // string gateway = 2;


    pub fn get_gateway(&self) -> &str {
        &self.gateway
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: ::std::string::String) {
        self.gateway = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut ::std::string::String {
        &mut self.gateway
    }

    // Take field
    pub fn take_gateway(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway, ::std::string::String::new())
    }

    // string network = 3;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Query {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if !self.gateway.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gateway);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.network);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if !self.gateway.is_empty() {
            os.write_string(2, &self.gateway)?;
        }
        if !self.network.is_empty() {
            os.write_string(3, &self.network)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query {
        Query::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &Query| { &m.service },
                |m: &mut Query| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gateway",
                |m: &Query| { &m.gateway },
                |m: &mut Query| { &mut m.gateway },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &Query| { &m.network },
                |m: &mut Query| { &mut m.network },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Query>(
                "Query",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Query {
        static instance: ::protobuf::rt::LazyV2<Query> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Query::new)
    }
}

impl ::protobuf::Clear for Query {
    fn clear(&mut self) {
        self.service.clear();
        self.gateway.clear();
        self.network.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Route {
    // message fields
    pub service: ::std::string::String,
    pub address: ::std::string::String,
    pub gateway: ::std::string::String,
    pub network: ::std::string::String,
    pub router: ::std::string::String,
    pub link: ::std::string::String,
    pub metric: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string gateway = 3;


    pub fn get_gateway(&self) -> &str {
        &self.gateway
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: ::std::string::String) {
        self.gateway = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut ::std::string::String {
        &mut self.gateway
    }

    // Take field
    pub fn take_gateway(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway, ::std::string::String::new())
    }

    // string network = 4;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string router = 5;


    pub fn get_router(&self) -> &str {
        &self.router
    }
    pub fn clear_router(&mut self) {
        self.router.clear();
    }

    // Param is passed by value, moved
    pub fn set_router(&mut self, v: ::std::string::String) {
        self.router = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_router(&mut self) -> &mut ::std::string::String {
        &mut self.router
    }

    // Take field
    pub fn take_router(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.router, ::std::string::String::new())
    }

    // string link = 6;


    pub fn get_link(&self) -> &str {
        &self.link
    }
    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }

    // int64 metric = 7;


    pub fn get_metric(&self) -> i64 {
        self.metric
    }
    pub fn clear_metric(&mut self) {
        self.metric = 0;
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: i64) {
        self.metric = v;
    }
}

impl ::protobuf::Message for Route {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.router)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.metric = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.gateway.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.gateway);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.network);
        }
        if !self.router.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.router);
        }
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.link);
        }
        if self.metric != 0 {
            my_size += ::protobuf::rt::value_size(7, self.metric, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.gateway.is_empty() {
            os.write_string(3, &self.gateway)?;
        }
        if !self.network.is_empty() {
            os.write_string(4, &self.network)?;
        }
        if !self.router.is_empty() {
            os.write_string(5, &self.router)?;
        }
        if !self.link.is_empty() {
            os.write_string(6, &self.link)?;
        }
        if self.metric != 0 {
            os.write_int64(7, self.metric)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Route {
        Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &Route| { &m.service },
                |m: &mut Route| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Route| { &m.address },
                |m: &mut Route| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gateway",
                |m: &Route| { &m.gateway },
                |m: &mut Route| { &mut m.gateway },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &Route| { &m.network },
                |m: &mut Route| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "router",
                |m: &Route| { &m.router },
                |m: &mut Route| { &mut m.router },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "link",
                |m: &Route| { &m.link },
                |m: &mut Route| { &mut m.link },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "metric",
                |m: &Route| { &m.metric },
                |m: &mut Route| { &mut m.metric },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Route>(
                "Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Route {
        static instance: ::protobuf::rt::LazyV2<Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Route::new)
    }
}

impl ::protobuf::Clear for Route {
    fn clear(&mut self) {
        self.service.clear();
        self.address.clear();
        self.gateway.clear();
        self.network.clear();
        self.router.clear();
        self.link.clear();
        self.metric = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AdvertType {
    AdvertAnnounce = 0,
    AdvertUpdate = 1,
}

impl ::protobuf::ProtobufEnum for AdvertType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AdvertType> {
        match value {
            0 => ::std::option::Option::Some(AdvertType::AdvertAnnounce),
            1 => ::std::option::Option::Some(AdvertType::AdvertUpdate),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AdvertType] = &[
            AdvertType::AdvertAnnounce,
            AdvertType::AdvertUpdate,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AdvertType>("AdvertType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AdvertType {
}

impl ::std::default::Default for AdvertType {
    fn default() -> Self {
        AdvertType::AdvertAnnounce
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvertType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    Create = 0,
    Delete = 1,
    Update = 2,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::Create),
            1 => ::std::option::Option::Some(EventType::Delete),
            2 => ::std::option::Option::Some(EventType::Update),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::Create,
            EventType::Delete,
            EventType::Update,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::Create
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13router/router.proto\x12\x0fgo.micro.router\"\t\n\x07Request\"\n\n\
    \x08Response\">\n\x0cListResponse\x12.\n\x06routes\x18\x01\x20\x03(\x0b2\
    \x16.go.micro.router.RouteR\x06routes\"=\n\rLookupRequest\x12,\n\x05quer\
    y\x18\x01\x20\x01(\x0b2\x16.go.micro.router.QueryR\x05query\"@\n\x0eLook\
    upResponse\x12.\n\x06routes\x18\x01\x20\x03(\x0b2\x16.go.micro.router.Ro\
    uteR\x06routes\"<\n\x0cQueryRequest\x12,\n\x05query\x18\x01\x20\x01(\x0b\
    2\x16.go.micro.router.QueryR\x05query\"?\n\rQueryResponse\x12.\n\x06rout\
    es\x18\x01\x20\x03(\x0b2\x16.go.micro.router.RouteR\x06routes\"\x0e\n\
    \x0cWatchRequest\"\xa9\x01\n\x06Advert\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \tR\x02id\x12/\n\x04type\x18\x02\x20\x01(\x0e2\x1b.go.micro.router.Adver\
    tTypeR\x04type\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03R\ttimestamp\x12\
    \x10\n\x03ttl\x18\x04\x20\x01(\x03R\x03ttl\x12.\n\x06events\x18\x05\x20\
    \x03(\x0b2\x16.go.micro.router.EventR\x06events\"\x11\n\x0fProcessRespon\
    se\"\x10\n\x0eCreateResponse\"\x10\n\x0eDeleteResponse\"\x10\n\x0eUpdate\
    Response\"\x93\x01\n\x05Event\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12.\n\x04type\x18\x02\x20\x01(\x0e2\x1a.go.micro.router.EventTypeR\x04\
    type\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03R\ttimestamp\x12,\n\x05rou\
    te\x18\x04\x20\x01(\x0b2\x16.go.micro.router.RouteR\x05route\"U\n\x05Que\
    ry\x12\x18\n\x07service\x18\x01\x20\x01(\tR\x07service\x12\x18\n\x07gate\
    way\x18\x02\x20\x01(\tR\x07gateway\x12\x18\n\x07network\x18\x03\x20\x01(\
    \tR\x07network\"\xb3\x01\n\x05Route\x12\x18\n\x07service\x18\x01\x20\x01\
    (\tR\x07service\x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\
    \x18\n\x07gateway\x18\x03\x20\x01(\tR\x07gateway\x12\x18\n\x07network\
    \x18\x04\x20\x01(\tR\x07network\x12\x16\n\x06router\x18\x05\x20\x01(\tR\
    \x06router\x12\x12\n\x04link\x18\x06\x20\x01(\tR\x04link\x12\x16\n\x06me\
    tric\x18\x07\x20\x01(\x03R\x06metric*2\n\nAdvertType\x12\x12\n\x0eAdvert\
    Announce\x10\0\x12\x10\n\x0cAdvertUpdate\x10\x01*/\n\tEventType\x12\n\n\
    \x06Create\x10\0\x12\n\n\x06Delete\x10\x01\x12\n\n\x06Update\x10\x022\
    \xa5\x02\n\x06Router\x12K\n\x06Lookup\x12\x1e.go.micro.router.LookupRequ\
    est\x1a\x1f.go.micro.router.LookupResponse\"\0\x12B\n\x05Watch\x12\x1d.g\
    o.micro.router.WatchRequest\x1a\x16.go.micro.router.Event\"\00\x01\x12B\
    \n\tAdvertise\x12\x18.go.micro.router.Request\x1a\x17.go.micro.router.Ad\
    vert\"\00\x01\x12F\n\x07Process\x12\x17.go.micro.router.Advert\x1a\x20.g\
    o.micro.router.ProcessResponse\"\02\xe3\x02\n\x05Table\x12C\n\x06Create\
    \x12\x16.go.micro.router.Route\x1a\x1f.go.micro.router.CreateResponse\"\
    \0\x12C\n\x06Delete\x12\x16.go.micro.router.Route\x1a\x1f.go.micro.route\
    r.DeleteResponse\"\0\x12C\n\x06Update\x12\x16.go.micro.router.Route\x1a\
    \x1f.go.micro.router.UpdateResponse\"\0\x12A\n\x04List\x12\x18.go.micro.\
    router.Request\x1a\x1d.go.micro.router.ListResponse\"\0\x12H\n\x05Query\
    \x12\x1d.go.micro.router.QueryRequest\x1a\x1e.go.micro.router.QueryRespo\
    nse\"\0J\xb3\x20\n\x07\x12\x05\0\0\x83\x01\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x17\nB\n\x02\x06\0\x12\x04\x05\0\
    \n\x01\x1a6\x20Router\x20service\x20is\x20used\x20by\x20the\x20proxy\x20\
    to\x20lookup\x20routes\n\n\n\n\x03\x06\0\x01\x12\x03\x05\x08\x0e\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\x06\x027\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x06\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x06\r\x1a\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x06%3\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x07\x02\
    3\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x07\x06\x0b\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x07\x0c\x18\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\
    \x07#)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x07*/\n\x0b\n\x04\x06\0\x02\
    \x02\x12\x03\x08\x023\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x08\x06\x0f\
    \n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x08\x10\x17\n\x0c\n\x05\x06\0\x02\
    \x02\x06\x12\x03\x08\"(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x08)/\n\
    \x0b\n\x04\x06\0\x02\x03\x12\x03\t\x022\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03\t\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\t\x0e\x14\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03\t\x1f.\n\n\n\x02\x06\x01\x12\x04\x0c\0\
    \x12\x01\n\n\n\x03\x06\x01\x01\x12\x03\x0c\x08\r\n\x0b\n\x04\x06\x01\x02\
    \0\x12\x03\r\x02/\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03\r\x06\x0c\n\x0c\
    \n\x05\x06\x01\x02\0\x02\x12\x03\r\r\x12\n\x0c\n\x05\x06\x01\x02\0\x03\
    \x12\x03\r\x1d+\n\x0b\n\x04\x06\x01\x02\x01\x12\x03\x0e\x02/\n\x0c\n\x05\
    \x06\x01\x02\x01\x01\x12\x03\x0e\x06\x0c\n\x0c\n\x05\x06\x01\x02\x01\x02\
    \x12\x03\x0e\r\x12\n\x0c\n\x05\x06\x01\x02\x01\x03\x12\x03\x0e\x1d+\n\
    \x0b\n\x04\x06\x01\x02\x02\x12\x03\x0f\x02/\n\x0c\n\x05\x06\x01\x02\x02\
    \x01\x12\x03\x0f\x06\x0c\n\x0c\n\x05\x06\x01\x02\x02\x02\x12\x03\x0f\r\
    \x12\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\x03\x0f\x1d+\n\x0b\n\x04\x06\
    \x01\x02\x03\x12\x03\x10\x02-\n\x0c\n\x05\x06\x01\x02\x03\x01\x12\x03\
    \x10\x06\n\n\x0c\n\x05\x06\x01\x02\x03\x02\x12\x03\x10\x0b\x12\n\x0c\n\
    \x05\x06\x01\x02\x03\x03\x12\x03\x10\x1d)\n\x0b\n\x04\x06\x01\x02\x04\
    \x12\x03\x11\x024\n\x0c\n\x05\x06\x01\x02\x04\x01\x12\x03\x11\x06\x0b\n\
    \x0c\n\x05\x06\x01\x02\x04\x02\x12\x03\x11\x0c\x18\n\x0c\n\x05\x06\x01\
    \x02\x04\x03\x12\x03\x11#0\n\x1a\n\x02\x04\0\x12\x03\x15\0\x12\x1a\x0f\
    \x20Empty\x20request\n\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x0f\n\x1b\n\
    \x02\x04\x01\x12\x03\x18\0\x13\x1a\x10\x20Empty\x20response\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x18\x08\x10\n.\n\x02\x04\x02\x12\x04\x1b\0\x1d\x01\
    \x1a\"\x20ListResponse\x20is\x20returned\x20by\x20List\n\n\n\n\x03\x04\
    \x02\x01\x12\x03\x1b\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1c\x02\
    \x1c\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x1c\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1c\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1c\x1a\x1b\n-\n\x02\x04\
    \x03\x12\x04\x20\0\"\x01\x1a!\x20LookupRequest\x20is\x20made\x20to\x20Lo\
    okup\n\n\n\n\x03\x04\x03\x01\x12\x03\x20\x08\x15\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03!\x02\x12\n\r\n\x05\x04\x03\x02\0\x04\x12\x04!\x02\x20\x17\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03!\x02\x07\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03!\x08\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03!\x10\x11\n2\n\
    \x02\x04\x04\x12\x04%\0'\x01\x1a&\x20LookupResponse\x20is\x20returned\
    \x20by\x20Lookup\n\n\n\n\x03\x04\x04\x01\x12\x03%\x08\x16\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03&\x02\x1c\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03&\
    \x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03&\x0b\x10\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03&\x11\x17\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03&\
    \x1a\x1b\n3\n\x02\x04\x05\x12\x04*\0,\x01\x1a'\x20QueryRequest\x20querie\
    s\x20Table\x20for\x20Routes\n\n\n\n\x03\x04\x05\x01\x12\x03*\x08\x14\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03+\x02\x12\n\r\n\x05\x04\x05\x02\0\x04\
    \x12\x04+\x02*\x15\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03+\x02\x07\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03+\x08\r\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03+\x10\x11\n0\n\x02\x04\x06\x12\x04/\01\x01\x1a$\x20QueryResponse\
    \x20is\x20returned\x20by\x20Query\n\n\n\n\x03\x04\x06\x01\x12\x03/\x08\
    \x15\n\x0b\n\x04\x04\x06\x02\0\x12\x030\x02\x1c\n\x0c\n\x05\x04\x06\x02\
    \0\x04\x12\x030\x02\n\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x030\x0b\x10\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x030\x11\x17\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x030\x1a\x1b\n1\n\x02\x04\x07\x12\x034\0\x17\x1a&\x20WatchReque\
    st\x20is\x20made\x20to\x20Watch\x20Router\n\n\n\n\x03\x04\x07\x01\x12\
    \x034\x08\x14\n3\n\x02\x05\0\x12\x047\0:\x01\x1a'\x20AdvertType\x20defin\
    es\x20the\x20type\x20of\x20advert\n\n\n\n\x03\x05\0\x01\x12\x037\x05\x0f\
    \n\x0b\n\x04\x05\0\x02\0\x12\x038\x02\x15\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x038\x02\x10\n\x0c\n\x05\x05\0\x02\0\x02\x12\x038\x13\x14\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x039\x02\x13\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x039\x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x039\x11\x12\n=\n\x02\
    \x04\x08\x12\x04=\0H\x01\x1a1\x20Advert\x20is\x20router\x20advertsement\
    \x20streamed\x20by\x20Watch\n\n\n\n\x03\x04\x08\x01\x12\x03=\x08\x0e\n+\
    \n\x04\x04\x08\x02\0\x12\x03?\x02\x10\x1a\x1e\x20id\x20of\x20the\x20adve\
    rtising\x20router\n\n\r\n\x05\x04\x08\x02\0\x04\x12\x04?\x02=\x10\n\x0c\
    \n\x05\x04\x08\x02\0\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03?\t\x0b\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03?\x0e\x0f\n$\n\x04\
    \x04\x08\x02\x01\x12\x03A\x02\x16\x1a\x17\x20type\x20of\x20advertisement\
    \n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04A\x02?\x10\n\x0c\n\x05\x04\x08\
    \x02\x01\x06\x12\x03A\x02\x0c\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03A\r\
    \x11\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03A\x14\x15\n2\n\x04\x04\x08\
    \x02\x02\x12\x03C\x02\x16\x1a%\x20unix\x20timestamp\x20of\x20the\x20adve\
    rtisement\n\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04C\x02A\x16\n\x0c\n\x05\
    \x04\x08\x02\x02\x05\x12\x03C\x02\x07\n\x0c\n\x05\x04\x08\x02\x02\x01\
    \x12\x03C\x08\x11\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03C\x14\x15\n\x20\
    \n\x04\x04\x08\x02\x03\x12\x03E\x02\x10\x1a\x13\x20TTL\x20of\x20the\x20A\
    dvert\n\n\r\n\x05\x04\x08\x02\x03\x04\x12\x04E\x02C\x16\n\x0c\n\x05\x04\
    \x08\x02\x03\x05\x12\x03E\x02\x07\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\
    \x03E\x08\x0b\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03E\x0e\x0f\n4\n\x04\
    \x04\x08\x02\x04\x12\x03G\x02\x1c\x1a'\x20events\x20is\x20a\x20list\x20o\
    f\x20advertised\x20events\n\n\x0c\n\x05\x04\x08\x02\x04\x04\x12\x03G\x02\
    \n\n\x0c\n\x05\x04\x08\x02\x04\x06\x12\x03G\x0b\x10\n\x0c\n\x05\x04\x08\
    \x02\x04\x01\x12\x03G\x11\x17\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03G\
    \x1a\x1b\n3\n\x02\x04\t\x12\x03K\0\x1a\x1a(\x20ProcessResponse\x20is\x20\
    returned\x20by\x20Process\n\n\n\n\x03\x04\t\x01\x12\x03K\x08\x17\n1\n\
    \x02\x04\n\x12\x03N\0\x19\x1a&\x20CreateResponse\x20is\x20returned\x20by\
    \x20Create\n\n\n\n\x03\x04\n\x01\x12\x03N\x08\x16\n1\n\x02\x04\x0b\x12\
    \x03Q\0\x19\x1a&\x20DeleteResponse\x20is\x20returned\x20by\x20Delete\n\n\
    \n\n\x03\x04\x0b\x01\x12\x03Q\x08\x16\n1\n\x02\x04\x0c\x12\x03T\0\x19\
    \x1a&\x20UpdateResponse\x20is\x20returned\x20by\x20Update\n\n\n\n\x03\
    \x04\x0c\x01\x12\x03T\x08\x16\n1\n\x02\x05\x01\x12\x04W\0[\x01\x1a%\x20E\
    ventType\x20defines\x20the\x20type\x20of\x20event\n\n\n\n\x03\x05\x01\
    \x01\x12\x03W\x05\x0e\n\x0b\n\x04\x05\x01\x02\0\x12\x03X\x02\r\n\x0c\n\
    \x05\x05\x01\x02\0\x01\x12\x03X\x02\x08\n\x0c\n\x05\x05\x01\x02\0\x02\
    \x12\x03X\x0b\x0c\n\x0b\n\x04\x05\x01\x02\x01\x12\x03Y\x02\r\n\x0c\n\x05\
    \x05\x01\x02\x01\x01\x12\x03Y\x02\x08\n\x0c\n\x05\x05\x01\x02\x01\x02\
    \x12\x03Y\x0b\x0c\n\x0b\n\x04\x05\x01\x02\x02\x12\x03Z\x02\r\n\x0c\n\x05\
    \x05\x01\x02\x02\x01\x12\x03Z\x02\x08\n\x0c\n\x05\x05\x01\x02\x02\x02\
    \x12\x03Z\x0b\x0c\n*\n\x02\x04\r\x12\x04^\0g\x01\x1a\x1e\x20Event\x20is\
    \x20routing\x20table\x20event\n\n\n\n\x03\x04\r\x01\x12\x03^\x08\r\n\"\n\
    \x04\x04\r\x02\0\x12\x03`\x02\x10\x1a\x15\x20the\x20unique\x20event\x20i\
    d\n\n\r\n\x05\x04\r\x02\0\x04\x12\x04`\x02^\x0f\n\x0c\n\x05\x04\r\x02\0\
    \x05\x12\x03`\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03`\t\x0b\n\x0c\n\
    \x05\x04\r\x02\0\x03\x12\x03`\x0e\x0f\n\x1c\n\x04\x04\r\x02\x01\x12\x03b\
    \x02\x15\x1a\x0f\x20type\x20of\x20event\n\n\r\n\x05\x04\r\x02\x01\x04\
    \x12\x04b\x02`\x10\n\x0c\n\x05\x04\r\x02\x01\x06\x12\x03b\x02\x0b\n\x0c\
    \n\x05\x04\r\x02\x01\x01\x12\x03b\x0c\x10\n\x0c\n\x05\x04\r\x02\x01\x03\
    \x12\x03b\x13\x14\n&\n\x04\x04\r\x02\x02\x12\x03d\x02\x16\x1a\x19\x20uni\
    x\x20timestamp\x20of\x20event\n\n\r\n\x05\x04\r\x02\x02\x04\x12\x04d\x02\
    b\x15\n\x0c\n\x05\x04\r\x02\x02\x05\x12\x03d\x02\x07\n\x0c\n\x05\x04\r\
    \x02\x02\x01\x12\x03d\x08\x11\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03d\x14\
    \x15\n\x1c\n\x04\x04\r\x02\x03\x12\x03f\x02\x12\x1a\x0f\x20service\x20ro\
    ute\n\n\r\n\x05\x04\r\x02\x03\x04\x12\x04f\x02d\x16\n\x0c\n\x05\x04\r\
    \x02\x03\x06\x12\x03f\x02\x07\n\x0c\n\x05\x04\r\x02\x03\x01\x12\x03f\x08\
    \r\n\x0c\n\x05\x04\r\x02\x03\x03\x12\x03f\x10\x11\n0\n\x02\x04\x0e\x12\
    \x04j\0q\x01\x1a$\x20Query\x20is\x20passed\x20in\x20a\x20LookupRequest\n\
    \n\n\n\x03\x04\x0e\x01\x12\x03j\x08\r\n\x20\n\x04\x04\x0e\x02\0\x12\x03l\
    \x02\x15\x1a\x13\x20service\x20to\x20lookup\n\n\r\n\x05\x04\x0e\x02\0\
    \x04\x12\x04l\x02j\x0f\n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03l\x02\x08\n\
    \x0c\n\x05\x04\x0e\x02\0\x01\x12\x03l\t\x10\n\x0c\n\x05\x04\x0e\x02\0\
    \x03\x12\x03l\x13\x14\n\x20\n\x04\x04\x0e\x02\x01\x12\x03n\x02\x15\x1a\
    \x13\x20gateway\x20to\x20lookup\n\n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04n\
    \x02l\x15\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03n\x02\x08\n\x0c\n\x05\
    \x04\x0e\x02\x01\x01\x12\x03n\t\x10\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\
    \x03n\x13\x14\n\x20\n\x04\x04\x0e\x02\x02\x12\x03p\x02\x15\x1a\x13\x20ne\
    twork\x20to\x20lookup\n\n\r\n\x05\x04\x0e\x02\x02\x04\x12\x04p\x02n\x15\
    \n\x0c\n\x05\x04\x0e\x02\x02\x05\x12\x03p\x02\x08\n\x0c\n\x05\x04\x0e\
    \x02\x02\x01\x12\x03p\t\x10\n\x0c\n\x05\x04\x0e\x02\x02\x03\x12\x03p\x13\
    \x14\n'\n\x02\x04\x0f\x12\x05t\0\x83\x01\x01\x1a\x1a\x20Route\x20is\x20a\
    \x20service\x20route\n\n\n\n\x03\x04\x0f\x01\x12\x03t\x08\r\n$\n\x04\x04\
    \x0f\x02\0\x12\x03v\x02\x15\x1a\x17\x20service\x20for\x20the\x20route\n\
    \n\r\n\x05\x04\x0f\x02\0\x04\x12\x04v\x02t\x0f\n\x0c\n\x05\x04\x0f\x02\0\
    \x05\x12\x03v\x02\x08\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03v\t\x10\n\x0c\
    \n\x05\x04\x0f\x02\0\x03\x12\x03v\x13\x14\n4\n\x04\x04\x0f\x02\x01\x12\
    \x03x\x02\x15\x1a'\x20the\x20address\x20that\x20advertise\x20this\x20rou\
    te\n\n\r\n\x05\x04\x0f\x02\x01\x04\x12\x04x\x02v\x15\n\x0c\n\x05\x04\x0f\
    \x02\x01\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03x\t\
    \x10\n\x0c\n\x05\x04\x0f\x02\x01\x03\x12\x03x\x13\x14\n&\n\x04\x04\x0f\
    \x02\x02\x12\x03z\x02\x15\x1a\x19\x20gateway\x20as\x20the\x20next\x20hop\
    \n\n\r\n\x05\x04\x0f\x02\x02\x04\x12\x04z\x02x\x15\n\x0c\n\x05\x04\x0f\
    \x02\x02\x05\x12\x03z\x02\x08\n\x0c\n\x05\x04\x0f\x02\x02\x01\x12\x03z\t\
    \x10\n\x0c\n\x05\x04\x0f\x02\x02\x03\x12\x03z\x13\x14\n/\n\x04\x04\x0f\
    \x02\x03\x12\x03|\x02\x15\x1a\"\x20the\x20network\x20for\x20this\x20dest\
    ination\n\n\r\n\x05\x04\x0f\x02\x03\x04\x12\x04|\x02z\x15\n\x0c\n\x05\
    \x04\x0f\x02\x03\x05\x12\x03|\x02\x08\n\x0c\n\x05\x04\x0f\x02\x03\x01\
    \x12\x03|\t\x10\n\x0c\n\x05\x04\x0f\x02\x03\x03\x12\x03|\x13\x14\n&\n\
    \x04\x04\x0f\x02\x04\x12\x03~\x02\x14\x1a\x19\x20router\x20if\x20the\x20\
    router\x20id\n\n\r\n\x05\x04\x0f\x02\x04\x04\x12\x04~\x02|\x15\n\x0c\n\
    \x05\x04\x0f\x02\x04\x05\x12\x03~\x02\x08\n\x0c\n\x05\x04\x0f\x02\x04\
    \x01\x12\x03~\t\x0f\n\x0c\n\x05\x04\x0f\x02\x04\x03\x12\x03~\x12\x13\n\
    \x20\n\x04\x04\x0f\x02\x05\x12\x04\x80\x01\x02\x12\x1a\x12\x20the\x20net\
    work\x20link\n\n\x0e\n\x05\x04\x0f\x02\x05\x04\x12\x05\x80\x01\x02~\x14\
    \n\r\n\x05\x04\x0f\x02\x05\x05\x12\x04\x80\x01\x02\x08\n\r\n\x05\x04\x0f\
    \x02\x05\x01\x12\x04\x80\x01\t\r\n\r\n\x05\x04\x0f\x02\x05\x03\x12\x04\
    \x80\x01\x10\x11\n0\n\x04\x04\x0f\x02\x06\x12\x04\x82\x01\x02\x13\x1a\"\
    \x20the\x20metric\x20/\x20score\x20of\x20this\x20route\n\n\x0f\n\x05\x04\
    \x0f\x02\x06\x04\x12\x06\x82\x01\x02\x80\x01\x12\n\r\n\x05\x04\x0f\x02\
    \x06\x05\x12\x04\x82\x01\x02\x07\n\r\n\x05\x04\x0f\x02\x06\x01\x12\x04\
    \x82\x01\x08\x0e\n\r\n\x05\x04\x0f\x02\x06\x03\x12\x04\x82\x01\x11\x12b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
