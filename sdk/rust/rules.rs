// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `auth/rules.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct Rule {
    // message fields
    pub id: ::std::string::String,
    pub role: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<super::auth::Resource>,
    pub access: Access,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule {
    fn default() -> &'a Rule {
        <Rule as ::protobuf::Message>::default_instance()
    }
}

impl Rule {
    pub fn new() -> Rule {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string role = 2;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // .go.micro.auth.Resource resource = 3;


    pub fn get_resource(&self) -> &super::auth::Resource {
        self.resource.as_ref().unwrap_or_else(|| super::auth::Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::auth::Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::auth::Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::auth::Resource {
        self.resource.take().unwrap_or_else(|| super::auth::Resource::new())
    }

    // .go.micro.auth.Access access = 4;


    pub fn get_access(&self) -> Access {
        self.access
    }
    pub fn clear_access(&mut self) {
        self.access = Access::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_access(&mut self, v: Access) {
        self.access = v;
    }
}

impl ::protobuf::Message for Rule {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.access, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.role);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.access != Access::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.access);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.role.is_empty() {
            os.write_string(2, &self.role)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.access != Access::UNKNOWN {
            os.write_enum(4, self.access.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule {
        Rule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Rule| { &m.id },
                    |m: &mut Rule| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role",
                    |m: &Rule| { &m.role },
                    |m: &mut Rule| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::Resource>>(
                    "resource",
                    |m: &Rule| { &m.resource },
                    |m: &mut Rule| { &mut m.resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Access>>(
                    "access",
                    |m: &Rule| { &m.access },
                    |m: &mut Rule| { &mut m.access },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule>(
                    "Rule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Rule {
        static mut instance: ::protobuf::lazy::Lazy<Rule> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Rule::new)
        }
    }
}

impl ::protobuf::Clear for Rule {
    fn clear(&mut self) {
        self.id.clear();
        self.role.clear();
        self.resource.clear();
        self.access = Access::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRequest {
    // message fields
    pub role: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<super::auth::Resource>,
    pub access: Access,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRequest {
    fn default() -> &'a CreateRequest {
        <CreateRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRequest {
    pub fn new() -> CreateRequest {
        ::std::default::Default::default()
    }

    // string role = 1;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // .go.micro.auth.Resource resource = 2;


    pub fn get_resource(&self) -> &super::auth::Resource {
        self.resource.as_ref().unwrap_or_else(|| super::auth::Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::auth::Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::auth::Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::auth::Resource {
        self.resource.take().unwrap_or_else(|| super::auth::Resource::new())
    }

    // .go.micro.auth.Access access = 3;


    pub fn get_access(&self) -> Access {
        self.access
    }
    pub fn clear_access(&mut self) {
        self.access = Access::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_access(&mut self, v: Access) {
        self.access = v;
    }
}

impl ::protobuf::Message for CreateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.access, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.access != Access::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.access);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.access != Access::UNKNOWN {
            os.write_enum(3, self.access.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRequest {
        CreateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role",
                    |m: &CreateRequest| { &m.role },
                    |m: &mut CreateRequest| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::Resource>>(
                    "resource",
                    |m: &CreateRequest| { &m.resource },
                    |m: &mut CreateRequest| { &mut m.resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Access>>(
                    "access",
                    |m: &CreateRequest| { &m.access },
                    |m: &mut CreateRequest| { &mut m.access },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateRequest>(
                    "CreateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateRequest {
    fn clear(&mut self) {
        self.role.clear();
        self.resource.clear();
        self.access = Access::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResponse {
    fn default() -> &'a CreateResponse {
        <CreateResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResponse {
    pub fn new() -> CreateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResponse {
        CreateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResponse>(
                    "CreateResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub role: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<super::auth::Resource>,
    pub access: Access,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // string role = 1;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // .go.micro.auth.Resource resource = 2;


    pub fn get_resource(&self) -> &super::auth::Resource {
        self.resource.as_ref().unwrap_or_else(|| super::auth::Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::auth::Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::auth::Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::auth::Resource {
        self.resource.take().unwrap_or_else(|| super::auth::Resource::new())
    }

    // .go.micro.auth.Access access = 3;


    pub fn get_access(&self) -> Access {
        self.access
    }
    pub fn clear_access(&mut self) {
        self.access = Access::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_access(&mut self, v: Access) {
        self.access = v;
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.access, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.access != Access::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.access);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.access != Access::UNKNOWN {
            os.write_enum(3, self.access.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role",
                    |m: &DeleteRequest| { &m.role },
                    |m: &mut DeleteRequest| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::Resource>>(
                    "resource",
                    |m: &DeleteRequest| { &m.resource },
                    |m: &mut DeleteRequest| { &mut m.resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Access>>(
                    "access",
                    |m: &DeleteRequest| { &m.access },
                    |m: &mut DeleteRequest| { &mut m.access },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteRequest>(
                    "DeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.role.clear();
        self.resource.clear();
        self.access = Access::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResponse>(
                    "DeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListRequest {
    fn default() -> &'a ListRequest {
        <ListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListRequest {
    pub fn new() -> ListRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListRequest {
        ListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListRequest>(
                    "ListRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResponse {
    // message fields
    pub rules: ::protobuf::RepeatedField<Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResponse {
    fn default() -> &'a ListResponse {
        <ListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResponse {
    pub fn new() -> ListResponse {
        ::std::default::Default::default()
    }

    // repeated .go.micro.auth.Rule rules = 1;


    pub fn get_rules(&self) -> &[Rule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResponse {
        ListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                    "rules",
                    |m: &ListResponse| { &m.rules },
                    |m: &mut ListResponse| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResponse>(
                    "ListResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListResponse {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Access {
    UNKNOWN = 0,
    GRANTED = 1,
    DENIED = 2,
}

impl ::protobuf::ProtobufEnum for Access {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Access> {
        match value {
            0 => ::std::option::Option::Some(Access::UNKNOWN),
            1 => ::std::option::Option::Some(Access::GRANTED),
            2 => ::std::option::Option::Some(Access::DENIED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Access] = &[
            Access::UNKNOWN,
            Access::GRANTED,
            Access::DENIED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<Access>("Access", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Access {
}

impl ::std::default::Default for Access {
    fn default() -> Self {
        Access::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Access {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10auth/rules.proto\x12\rgo.micro.auth\x1a\nauth.proto\"\x8e\x01\n\
    \x04Rule\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04role\x18\
    \x02\x20\x01(\tR\x04role\x123\n\x08resource\x18\x03\x20\x01(\x0b2\x17.go\
    .micro.auth.ResourceR\x08resource\x12-\n\x06access\x18\x04\x20\x01(\x0e2\
    \x15.go.micro.auth.AccessR\x06access\"\x87\x01\n\rCreateRequest\x12\x12\
    \n\x04role\x18\x01\x20\x01(\tR\x04role\x123\n\x08resource\x18\x02\x20\
    \x01(\x0b2\x17.go.micro.auth.ResourceR\x08resource\x12-\n\x06access\x18\
    \x03\x20\x01(\x0e2\x15.go.micro.auth.AccessR\x06access\"\x10\n\x0eCreate\
    Response\"\x87\x01\n\rDeleteRequest\x12\x12\n\x04role\x18\x01\x20\x01(\t\
    R\x04role\x123\n\x08resource\x18\x02\x20\x01(\x0b2\x17.go.micro.auth.Res\
    ourceR\x08resource\x12-\n\x06access\x18\x03\x20\x01(\x0e2\x15.go.micro.a\
    uth.AccessR\x06access\"\x10\n\x0eDeleteResponse\"\r\n\x0bListRequest\"9\
    \n\x0cListResponse\x12)\n\x05rules\x18\x01\x20\x03(\x0b2\x13.go.micro.au\
    th.RuleR\x05rules*.\n\x06Access\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07\
    GRANTED\x10\x01\x12\n\n\x06DENIED\x10\x022\xdc\x01\n\x05Rules\x12G\n\x06\
    Create\x12\x1c.go.micro.auth.CreateRequest\x1a\x1d.go.micro.auth.CreateR\
    esponse\"\0\x12G\n\x06Delete\x12\x1c.go.micro.auth.DeleteRequest\x1a\x1d\
    .go.micro.auth.DeleteResponse\"\0\x12A\n\x04List\x12\x1a.go.micro.auth.L\
    istRequest\x1a\x1b.go.micro.auth.ListResponse\"\0B\x0bZ\tauth;authJ\xb3\
    \n\n\x06\x12\x04\0\00\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x15\n\x08\n\x01\x08\x12\x03\x04\0\x20\n\t\n\x02\x08\
    \x0b\x12\x03\x04\0\x20\n\t\n\x02\x03\0\x12\x03\x06\x07\x13\n\n\n\x02\x06\
    \0\x12\x04\x08\0\x0c\x01\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\r\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\t\x08=\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\t\
    \x0c\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\t\x13\x20\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\t+9\n\x0b\n\x04\x06\0\x02\x01\x12\x03\n\x08=\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\n\x0c\x12\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\n\x13\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\n+9\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03\x0b\x087\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x0b\x0c\x10\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0b\x11\x1c\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x0b'3\n\n\n\x02\x05\0\x12\x04\x0e\0\x12\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\x0e\x05\x0b\n\x0b\n\x04\x05\0\x02\0\x12\
    \x03\x0f\x08\x14\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0f\x08\x0f\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\x0f\x12\x13\n\x0b\n\x04\x05\0\x02\x01\x12\
    \x03\x10\x08\x14\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x10\x08\x0f\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x10\x12\x13\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x11\x08\x13\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x11\x08\x0e\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x11\x11\x12\n\n\n\x02\x04\0\x12\x04\
    \x14\0\x19\x01\n\n\n\x03\x04\0\x01\x12\x03\x14\x08\x0c\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x15\x08\x16\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x15\x08\x14\
    \x0e\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x15\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x15\x0f\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\
    \x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x16\x08\x18\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04\x16\x08\x15\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x16\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x16\x0f\x13\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x16\x16\x17\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x17\x08\x1e\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x17\x08\x16\x18\
    \n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x17\x11\x19\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17\
    \x1c\x1d\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x18\x08\x1a\n\r\n\x05\x04\0\
    \x02\x03\x04\x12\x04\x18\x08\x17\x1e\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\x18\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x18\x0f\x15\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x18\x18\x19\n\n\n\x02\x04\x01\x12\x04\
    \x1b\0\x1f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08\x15\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x1c\x08\x18\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x1c\
    \x08\x1b\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1c\x08\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1c\x0f\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1c\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1d\x02\x18\n\r\
    \n\x05\x04\x01\x02\x01\x04\x12\x04\x1d\x02\x1c\x18\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03\x1d\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x1d\x0b\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1d\x16\x17\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x1e\x02\x14\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04\x1e\x02\x1d\x18\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x1e\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1e\t\x0f\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x1e\x12\x13\n\t\n\x02\x04\x02\x12\x03!\0\x19\n\
    \n\n\x03\x04\x02\x01\x12\x03!\x08\x16\n\n\n\x02\x04\x03\x12\x04#\0'\x01\
    \n\n\n\x03\x04\x03\x01\x12\x03#\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03$\x08\x18\n\r\n\x05\x04\x03\x02\0\x04\x12\x04$\x08#\x17\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03$\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03$\x0f\x13\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03$\x16\x17\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03%\x02\x18\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04%\
    \x02$\x18\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03%\x02\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03%\x0b\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03%\x16\x17\n\x0b\n\x04\x04\x03\x02\x02\x12\x03&\x02\x14\n\r\n\x05\x04\
    \x03\x02\x02\x04\x12\x04&\x02%\x18\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\
    \x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03&\t\x0f\n\x0c\n\x05\
    \x04\x03\x02\x02\x03\x12\x03&\x12\x13\n\t\n\x02\x04\x04\x12\x03)\0\x19\n\
    \n\n\x03\x04\x04\x01\x12\x03)\x08\x16\n\n\n\x02\x04\x05\x12\x04+\0,\x01\
    \n\n\n\x03\x04\x05\x01\x12\x03+\x08\x13\n\n\n\x02\x04\x06\x12\x04.\00\
    \x01\n\n\n\x03\x04\x06\x01\x12\x03.\x08\x14\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03/\x08\x20\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03/\x08\x10\n\x0c\n\
    \x05\x04\x06\x02\0\x06\x12\x03/\x11\x15\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03/\x16\x1b\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03/\x1e\x1fb\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
