// This file is generated by rust-protobuf 2.15.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `store/store.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_15_0;

#[derive(PartialEq,Clone,Default)]
pub struct Field {
    // message fields
    pub field_type: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &Field| { &m.field_type },
                    |m: &mut Field| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Field| { &m.value },
                    |m: &mut Field| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Field>(
                    "Field",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Field {
        static mut instance: ::protobuf::lazy::Lazy<Field> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Field::new)
        }
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.field_type.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    pub expiry: i64,
    pub metadata: ::std::collections::HashMap<::std::string::String, Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // int64 expiry = 3;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }

    // repeated .go.micro.store.Record.MetadataEntry metadata = 4;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, Field> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, Field>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Field> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, Field> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Field>>(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(3, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Field>>(4, &self.metadata);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.expiry != 0 {
            os.write_int64(3, self.expiry)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Field>>(4, &self.metadata, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Record| { &m.key },
                    |m: &mut Record| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &Record| { &m.value },
                    |m: &mut Record| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "expiry",
                    |m: &Record| { &m.expiry },
                    |m: &mut Record| { &mut m.expiry },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Field>>(
                    "metadata",
                    |m: &Record| { &m.metadata },
                    |m: &mut Record| { &mut m.metadata },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record>(
                    "Record",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Record {
        static mut instance: ::protobuf::lazy::Lazy<Record> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Record::new)
        }
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.expiry = 0;
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadOptions {
    // message fields
    pub database: ::std::string::String,
    pub table: ::std::string::String,
    pub prefix: bool,
    pub suffix: bool,
    pub limit: u64,
    pub offset: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadOptions {
    fn default() -> &'a ReadOptions {
        <ReadOptions as ::protobuf::Message>::default_instance()
    }
}

impl ReadOptions {
    pub fn new() -> ReadOptions {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // string table = 2;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // bool prefix = 3;


    pub fn get_prefix(&self) -> bool {
        self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix = false;
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: bool) {
        self.prefix = v;
    }

    // bool suffix = 4;


    pub fn get_suffix(&self) -> bool {
        self.suffix
    }
    pub fn clear_suffix(&mut self) {
        self.suffix = false;
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: bool) {
        self.suffix = v;
    }

    // uint64 limit = 5;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }

    // uint64 offset = 6;


    pub fn get_offset(&self) -> u64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = v;
    }
}

impl ::protobuf::Message for ReadOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.prefix = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.suffix = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        if self.prefix != false {
            my_size += 2;
        }
        if self.suffix != false {
            my_size += 2;
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(6, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        if self.prefix != false {
            os.write_bool(3, self.prefix)?;
        }
        if self.suffix != false {
            os.write_bool(4, self.suffix)?;
        }
        if self.limit != 0 {
            os.write_uint64(5, self.limit)?;
        }
        if self.offset != 0 {
            os.write_uint64(6, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadOptions {
        ReadOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &ReadOptions| { &m.database },
                    |m: &mut ReadOptions| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &ReadOptions| { &m.table },
                    |m: &mut ReadOptions| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "prefix",
                    |m: &ReadOptions| { &m.prefix },
                    |m: &mut ReadOptions| { &mut m.prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "suffix",
                    |m: &ReadOptions| { &m.suffix },
                    |m: &mut ReadOptions| { &mut m.suffix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "limit",
                    |m: &ReadOptions| { &m.limit },
                    |m: &mut ReadOptions| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "offset",
                    |m: &ReadOptions| { &m.offset },
                    |m: &mut ReadOptions| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadOptions>(
                    "ReadOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadOptions {
        static mut instance: ::protobuf::lazy::Lazy<ReadOptions> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadOptions::new)
        }
    }
}

impl ::protobuf::Clear for ReadOptions {
    fn clear(&mut self) {
        self.database.clear();
        self.table.clear();
        self.prefix = false;
        self.suffix = false;
        self.limit = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub key: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<ReadOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .go.micro.store.ReadOptions options = 2;


    pub fn get_options(&self) -> &ReadOptions {
        self.options.as_ref().unwrap_or_else(|| ReadOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ReadOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut ReadOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> ReadOptions {
        self.options.take().unwrap_or_else(|| ReadOptions::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &ReadRequest| { &m.key },
                    |m: &mut ReadRequest| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadOptions>>(
                    "options",
                    |m: &ReadRequest| { &m.options },
                    |m: &mut ReadRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRequest>(
                    "ReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.key.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub records: ::protobuf::RepeatedField<Record>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // repeated .go.micro.store.Record records = 1;


    pub fn get_records(&self) -> &[Record] {
        &self.records
    }
    pub fn clear_records(&mut self) {
        self.records.clear();
    }

    // Param is passed by value, moved
    pub fn set_records(&mut self, v: ::protobuf::RepeatedField<Record>) {
        self.records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_records(&mut self) -> &mut ::protobuf::RepeatedField<Record> {
        &mut self.records
    }

    // Take field
    pub fn take_records(&mut self) -> ::protobuf::RepeatedField<Record> {
        ::std::mem::replace(&mut self.records, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.records)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.records {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                    "records",
                    |m: &ReadResponse| { &m.records },
                    |m: &mut ReadResponse| { &mut m.records },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadResponse>(
                    "ReadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.records.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteOptions {
    // message fields
    pub database: ::std::string::String,
    pub table: ::std::string::String,
    pub expiry: i64,
    pub ttl: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteOptions {
    fn default() -> &'a WriteOptions {
        <WriteOptions as ::protobuf::Message>::default_instance()
    }
}

impl WriteOptions {
    pub fn new() -> WriteOptions {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // string table = 2;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // int64 expiry = 3;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }

    // int64 ttl = 4;


    pub fn get_ttl(&self) -> i64 {
        self.ttl
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: i64) {
        self.ttl = v;
    }
}

impl ::protobuf::Message for WriteOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ttl = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(3, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        if self.expiry != 0 {
            os.write_int64(3, self.expiry)?;
        }
        if self.ttl != 0 {
            os.write_int64(4, self.ttl)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteOptions {
        WriteOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &WriteOptions| { &m.database },
                    |m: &mut WriteOptions| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &WriteOptions| { &m.table },
                    |m: &mut WriteOptions| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "expiry",
                    |m: &WriteOptions| { &m.expiry },
                    |m: &mut WriteOptions| { &mut m.expiry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ttl",
                    |m: &WriteOptions| { &m.ttl },
                    |m: &mut WriteOptions| { &mut m.ttl },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteOptions>(
                    "WriteOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteOptions {
        static mut instance: ::protobuf::lazy::Lazy<WriteOptions> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteOptions::new)
        }
    }
}

impl ::protobuf::Clear for WriteOptions {
    fn clear(&mut self) {
        self.database.clear();
        self.table.clear();
        self.expiry = 0;
        self.ttl = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRequest {
    // message fields
    pub record: ::protobuf::SingularPtrField<Record>,
    pub options: ::protobuf::SingularPtrField<WriteOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // .go.micro.store.Record record = 1;


    pub fn get_record(&self) -> &Record {
        self.record.as_ref().unwrap_or_else(|| Record::default_instance())
    }
    pub fn clear_record(&mut self) {
        self.record.clear();
    }

    pub fn has_record(&self) -> bool {
        self.record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record(&mut self, v: Record) {
        self.record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record(&mut self) -> &mut Record {
        if self.record.is_none() {
            self.record.set_default();
        }
        self.record.as_mut().unwrap()
    }

    // Take field
    pub fn take_record(&mut self) -> Record {
        self.record.take().unwrap_or_else(|| Record::new())
    }

    // .go.micro.store.WriteOptions options = 2;


    pub fn get_options(&self) -> &WriteOptions {
        self.options.as_ref().unwrap_or_else(|| WriteOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: WriteOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut WriteOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> WriteOptions {
        self.options.take().unwrap_or_else(|| WriteOptions::new())
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.record)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.record.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                    "record",
                    |m: &WriteRequest| { &m.record },
                    |m: &mut WriteRequest| { &mut m.record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WriteOptions>>(
                    "options",
                    |m: &WriteRequest| { &m.options },
                    |m: &mut WriteRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteRequest>(
                    "WriteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteRequest::new)
        }
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.record.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteResponse {
    fn default() -> &'a WriteResponse {
        <WriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteResponse {
    pub fn new() -> WriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResponse {
        WriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteResponse>(
                    "WriteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteResponse {
        static mut instance: ::protobuf::lazy::Lazy<WriteResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteResponse::new)
        }
    }
}

impl ::protobuf::Clear for WriteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteOptions {
    // message fields
    pub database: ::std::string::String,
    pub table: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteOptions {
    fn default() -> &'a DeleteOptions {
        <DeleteOptions as ::protobuf::Message>::default_instance()
    }
}

impl DeleteOptions {
    pub fn new() -> DeleteOptions {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // string table = 2;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteOptions {
        DeleteOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &DeleteOptions| { &m.database },
                    |m: &mut DeleteOptions| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &DeleteOptions| { &m.table },
                    |m: &mut DeleteOptions| { &mut m.table },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteOptions>(
                    "DeleteOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteOptions {
        static mut instance: ::protobuf::lazy::Lazy<DeleteOptions> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteOptions::new)
        }
    }
}

impl ::protobuf::Clear for DeleteOptions {
    fn clear(&mut self) {
        self.database.clear();
        self.table.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub key: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<DeleteOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .go.micro.store.DeleteOptions options = 2;


    pub fn get_options(&self) -> &DeleteOptions {
        self.options.as_ref().unwrap_or_else(|| DeleteOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: DeleteOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut DeleteOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> DeleteOptions {
        self.options.take().unwrap_or_else(|| DeleteOptions::new())
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &DeleteRequest| { &m.key },
                    |m: &mut DeleteRequest| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeleteOptions>>(
                    "options",
                    |m: &DeleteRequest| { &m.options },
                    |m: &mut DeleteRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteRequest>(
                    "DeleteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.key.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResponse>(
                    "DeleteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOptions {
    // message fields
    pub database: ::std::string::String,
    pub table: ::std::string::String,
    pub prefix: ::std::string::String,
    pub suffix: ::std::string::String,
    pub limit: u64,
    pub offset: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOptions {
    fn default() -> &'a ListOptions {
        <ListOptions as ::protobuf::Message>::default_instance()
    }
}

impl ListOptions {
    pub fn new() -> ListOptions {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // string table = 2;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string prefix = 3;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // string suffix = 4;


    pub fn get_suffix(&self) -> &str {
        &self.suffix
    }
    pub fn clear_suffix(&mut self) {
        self.suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::string::String) {
        self.suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.suffix
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.suffix, ::std::string::String::new())
    }

    // uint64 limit = 5;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }

    // uint64 offset = 6;


    pub fn get_offset(&self) -> u64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = v;
    }
}

impl ::protobuf::Message for ListOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.suffix)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.table);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prefix);
        }
        if !self.suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.suffix);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(6, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if !self.table.is_empty() {
            os.write_string(2, &self.table)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(3, &self.prefix)?;
        }
        if !self.suffix.is_empty() {
            os.write_string(4, &self.suffix)?;
        }
        if self.limit != 0 {
            os.write_uint64(5, self.limit)?;
        }
        if self.offset != 0 {
            os.write_uint64(6, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOptions {
        ListOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &ListOptions| { &m.database },
                    |m: &mut ListOptions| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &ListOptions| { &m.table },
                    |m: &mut ListOptions| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prefix",
                    |m: &ListOptions| { &m.prefix },
                    |m: &mut ListOptions| { &mut m.prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "suffix",
                    |m: &ListOptions| { &m.suffix },
                    |m: &mut ListOptions| { &mut m.suffix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "limit",
                    |m: &ListOptions| { &m.limit },
                    |m: &mut ListOptions| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "offset",
                    |m: &ListOptions| { &m.offset },
                    |m: &mut ListOptions| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListOptions>(
                    "ListOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOptions {
        static mut instance: ::protobuf::lazy::Lazy<ListOptions> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListOptions::new)
        }
    }
}

impl ::protobuf::Clear for ListOptions {
    fn clear(&mut self) {
        self.database.clear();
        self.table.clear();
        self.prefix.clear();
        self.suffix.clear();
        self.limit = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListRequest {
    // message fields
    pub options: ::protobuf::SingularPtrField<ListOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListRequest {
    fn default() -> &'a ListRequest {
        <ListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListRequest {
    pub fn new() -> ListRequest {
        ::std::default::Default::default()
    }

    // .go.micro.store.ListOptions options = 1;


    pub fn get_options(&self) -> &ListOptions {
        self.options.as_ref().unwrap_or_else(|| ListOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ListOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut ListOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> ListOptions {
        self.options.take().unwrap_or_else(|| ListOptions::new())
    }
}

impl ::protobuf::Message for ListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListRequest {
        ListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ListOptions>>(
                    "options",
                    |m: &ListRequest| { &m.options },
                    |m: &mut ListRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListRequest>(
                    "ListRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListRequest {
    fn clear(&mut self) {
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResponse {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResponse {
    fn default() -> &'a ListResponse {
        <ListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResponse {
    pub fn new() -> ListResponse {
        ::std::default::Default::default()
    }

    // repeated string keys = 2;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResponse {
        ListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "keys",
                    |m: &ListResponse| { &m.keys },
                    |m: &mut ListResponse| { &mut m.keys },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResponse>(
                    "ListResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListResponse {
    fn clear(&mut self) {
        self.keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabasesRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatabasesRequest {
    fn default() -> &'a DatabasesRequest {
        <DatabasesRequest as ::protobuf::Message>::default_instance()
    }
}

impl DatabasesRequest {
    pub fn new() -> DatabasesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DatabasesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabasesRequest {
        DatabasesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatabasesRequest>(
                    "DatabasesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabasesRequest {
        static mut instance: ::protobuf::lazy::Lazy<DatabasesRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DatabasesRequest::new)
        }
    }
}

impl ::protobuf::Clear for DatabasesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabasesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabasesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DatabasesResponse {
    // message fields
    pub databases: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DatabasesResponse {
    fn default() -> &'a DatabasesResponse {
        <DatabasesResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatabasesResponse {
    pub fn new() -> DatabasesResponse {
        ::std::default::Default::default()
    }

    // repeated string databases = 1;


    pub fn get_databases(&self) -> &[::std::string::String] {
        &self.databases
    }
    pub fn clear_databases(&mut self) {
        self.databases.clear();
    }

    // Param is passed by value, moved
    pub fn set_databases(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.databases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_databases(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.databases
    }

    // Take field
    pub fn take_databases(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.databases, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DatabasesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.databases)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.databases {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.databases {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DatabasesResponse {
        DatabasesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "databases",
                    |m: &DatabasesResponse| { &m.databases },
                    |m: &mut DatabasesResponse| { &mut m.databases },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DatabasesResponse>(
                    "DatabasesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DatabasesResponse {
        static mut instance: ::protobuf::lazy::Lazy<DatabasesResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DatabasesResponse::new)
        }
    }
}

impl ::protobuf::Clear for DatabasesResponse {
    fn clear(&mut self) {
        self.databases.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DatabasesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabasesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TablesRequest {
    // message fields
    pub database: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TablesRequest {
    fn default() -> &'a TablesRequest {
        <TablesRequest as ::protobuf::Message>::default_instance()
    }
}

impl TablesRequest {
    pub fn new() -> TablesRequest {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TablesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TablesRequest {
        TablesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &TablesRequest| { &m.database },
                    |m: &mut TablesRequest| { &mut m.database },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TablesRequest>(
                    "TablesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TablesRequest {
        static mut instance: ::protobuf::lazy::Lazy<TablesRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TablesRequest::new)
        }
    }
}

impl ::protobuf::Clear for TablesRequest {
    fn clear(&mut self) {
        self.database.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TablesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TablesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TablesResponse {
    // message fields
    pub tables: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TablesResponse {
    fn default() -> &'a TablesResponse {
        <TablesResponse as ::protobuf::Message>::default_instance()
    }
}

impl TablesResponse {
    pub fn new() -> TablesResponse {
        ::std::default::Default::default()
    }

    // repeated string tables = 1;


    pub fn get_tables(&self) -> &[::std::string::String] {
        &self.tables
    }
    pub fn clear_tables(&mut self) {
        self.tables.clear();
    }

    // Param is passed by value, moved
    pub fn set_tables(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tables(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tables
    }

    // Take field
    pub fn take_tables(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tables, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TablesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tables)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tables {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tables {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TablesResponse {
        TablesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tables",
                    |m: &TablesResponse| { &m.tables },
                    |m: &mut TablesResponse| { &mut m.tables },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TablesResponse>(
                    "TablesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TablesResponse {
        static mut instance: ::protobuf::lazy::Lazy<TablesResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TablesResponse::new)
        }
    }
}

impl ::protobuf::Clear for TablesResponse {
    fn clear(&mut self) {
        self.tables.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TablesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TablesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11store/store.proto\x12\x0ego.micro.store\"1\n\x05Field\x12\x12\n\
    \x04type\x18\x01\x20\x01(\tR\x04type\x12\x14\n\x05value\x18\x02\x20\x01(\
    \tR\x05value\"\xde\x01\n\x06Record\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\x12\x16\n\x06e\
    xpiry\x18\x03\x20\x01(\x03R\x06expiry\x12@\n\x08metadata\x18\x04\x20\x03\
    (\x0b2$.go.micro.store.Record.MetadataEntryR\x08metadata\x1aR\n\rMetadat\
    aEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12+\n\x05value\x18\
    \x02\x20\x01(\x0b2\x15.go.micro.store.FieldR\x05value:\x028\x01\"\x9d\
    \x01\n\x0bReadOptions\x12\x1a\n\x08database\x18\x01\x20\x01(\tR\x08datab\
    ase\x12\x14\n\x05table\x18\x02\x20\x01(\tR\x05table\x12\x16\n\x06prefix\
    \x18\x03\x20\x01(\x08R\x06prefix\x12\x16\n\x06suffix\x18\x04\x20\x01(\
    \x08R\x06suffix\x12\x14\n\x05limit\x18\x05\x20\x01(\x04R\x05limit\x12\
    \x16\n\x06offset\x18\x06\x20\x01(\x04R\x06offset\"V\n\x0bReadRequest\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x125\n\x07options\x18\x02\x20\
    \x01(\x0b2\x1b.go.micro.store.ReadOptionsR\x07options\"@\n\x0cReadRespon\
    se\x120\n\x07records\x18\x01\x20\x03(\x0b2\x16.go.micro.store.RecordR\
    \x07records\"j\n\x0cWriteOptions\x12\x1a\n\x08database\x18\x01\x20\x01(\
    \tR\x08database\x12\x14\n\x05table\x18\x02\x20\x01(\tR\x05table\x12\x16\
    \n\x06expiry\x18\x03\x20\x01(\x03R\x06expiry\x12\x10\n\x03ttl\x18\x04\
    \x20\x01(\x03R\x03ttl\"v\n\x0cWriteRequest\x12.\n\x06record\x18\x01\x20\
    \x01(\x0b2\x16.go.micro.store.RecordR\x06record\x126\n\x07options\x18\
    \x02\x20\x01(\x0b2\x1c.go.micro.store.WriteOptionsR\x07options\"\x0f\n\r\
    WriteResponse\"A\n\rDeleteOptions\x12\x1a\n\x08database\x18\x01\x20\x01(\
    \tR\x08database\x12\x14\n\x05table\x18\x02\x20\x01(\tR\x05table\"Z\n\rDe\
    leteRequest\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x127\n\x07option\
    s\x18\x02\x20\x01(\x0b2\x1d.go.micro.store.DeleteOptionsR\x07options\"\
    \x10\n\x0eDeleteResponse\"\x9d\x01\n\x0bListOptions\x12\x1a\n\x08databas\
    e\x18\x01\x20\x01(\tR\x08database\x12\x14\n\x05table\x18\x02\x20\x01(\tR\
    \x05table\x12\x16\n\x06prefix\x18\x03\x20\x01(\tR\x06prefix\x12\x16\n\
    \x06suffix\x18\x04\x20\x01(\tR\x06suffix\x12\x14\n\x05limit\x18\x05\x20\
    \x01(\x04R\x05limit\x12\x16\n\x06offset\x18\x06\x20\x01(\x04R\x06offset\
    \"D\n\x0bListRequest\x125\n\x07options\x18\x01\x20\x01(\x0b2\x1b.go.micr\
    o.store.ListOptionsR\x07options\"(\n\x0cListResponse\x12\x12\n\x04keys\
    \x18\x02\x20\x03(\tR\x04keysJ\x04\x08\x01\x10\x02\"\x12\n\x10DatabasesRe\
    quest\"1\n\x11DatabasesResponse\x12\x1c\n\tdatabases\x18\x01\x20\x03(\tR\
    \tdatabases\"+\n\rTablesRequest\x12\x1a\n\x08database\x18\x01\x20\x01(\t\
    R\x08database\"(\n\x0eTablesResponse\x12\x16\n\x06tables\x18\x01\x20\x03\
    (\tR\x06tables2\xc5\x03\n\x05Store\x12C\n\x04Read\x12\x1b.go.micro.store\
    .ReadRequest\x1a\x1c.go.micro.store.ReadResponse\"\0\x12F\n\x05Write\x12\
    \x1c.go.micro.store.WriteRequest\x1a\x1d.go.micro.store.WriteResponse\"\
    \0\x12I\n\x06Delete\x12\x1d.go.micro.store.DeleteRequest\x1a\x1e.go.micr\
    o.store.DeleteResponse\"\0\x12E\n\x04List\x12\x1b.go.micro.store.ListReq\
    uest\x1a\x1c.go.micro.store.ListResponse\"\00\x01\x12R\n\tDatabases\x12\
    \x20.go.micro.store.DatabasesRequest\x1a!.go.micro.store.DatabasesRespon\
    se\"\0\x12I\n\x06Tables\x12\x1d.go.micro.store.TablesRequest\x1a\x1e.go.\
    micro.store.TablesResponse\"\0J\xbd\x1c\n\x06\x12\x04\0\0l\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x16\n\n\n\x02\
    \x06\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\r\n\x0b\
    \n\x04\x06\0\x02\0\x12\x03\x05\x087\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x05\x0c\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x05\x11\x1c\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\x05'3\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x06\x08\
    :\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x06\x0c\x11\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x06\x12\x1e\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x06)6\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x07\x08=\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03\x07\x0c\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x07\
    \x13\x20\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x07+9\n\x0b\n\x04\x06\0\
    \x02\x03\x12\x03\x08\x08>\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x08\x0c\
    \x10\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x08\x11\x1c\n\x0c\n\x05\x06\0\
    \x02\x03\x06\x12\x03\x08'-\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x08.:\n\
    \x0b\n\x04\x06\0\x02\x04\x12\x03\t\x08F\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03\t\x0c\x15\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\t\x16&\n\x0c\n\
    \x05\x06\0\x02\x04\x03\x12\x03\t1B\n\x0b\n\x04\x06\0\x02\x05\x12\x03\n\
    \x08=\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\n\x0c\x12\n\x0c\n\x05\x06\0\
    \x02\x05\x02\x12\x03\n\x13\x20\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\n+9\
    \n\n\n\x02\x04\0\x12\x04\r\0\x12\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\r\
    \nB\n\x04\x04\0\x02\0\x12\x03\x0f\x08\x18\x1a5\x20type\x20of\x20value\
    \x20e.g\x20string,\x20int,\x20int64,\x20bool,\x20float64\n\n\r\n\x05\x04\
    \0\x02\0\x04\x12\x04\x0f\x08\r\x0f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0f\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0f\x13\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0f\x16\x17\n\x1f\n\x04\x04\0\x02\x01\x12\x03\
    \x11\x08\x19\x1a\x12\x20the\x20actual\x20value\n\n\r\n\x05\x04\0\x02\x01\
    \x04\x12\x04\x11\x08\x0f\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\
    \x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x0f\x14\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x11\x17\x18\n\n\n\x02\x04\x01\x12\x04\x14\0\
    \x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x0e\n\x20\n\x04\x04\x01\
    \x02\0\x12\x03\x16\x08\x17\x1a\x13\x20key\x20of\x20the\x20record\n\n\r\n\
    \x05\x04\x01\x02\0\x04\x12\x04\x16\x08\x14\x10\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x16\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\x0f\
    \x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x15\x16\n\"\n\x04\x04\x01\
    \x02\x01\x12\x03\x18\x08\x18\x1a\x15\x20value\x20in\x20the\x20record\n\n\
    \r\n\x05\x04\x01\x02\x01\x04\x12\x04\x18\x08\x16\x17\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x18\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x18\x0e\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x16\x17\n7\n\
    \x04\x04\x01\x02\x02\x12\x03\x1a\x08\x19\x1a*\x20time.Duration\x20(signe\
    d\x20int64\x20nanoseconds)\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x1a\
    \x08\x18\x18\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1a\x08\r\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03\x1a\x0e\x14\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x1a\x17\x18\n&\n\x04\x04\x01\x02\x03\x12\x03\x1c\x08'\x1a\
    \x19\x20the\x20associated\x20metadata\n\n\r\n\x05\x04\x01\x02\x03\x04\
    \x12\x04\x1c\x08\x1a\x19\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x1c\x08\
    \x19\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1c\x1a\"\n\x0c\n\x05\x04\
    \x01\x02\x03\x03\x12\x03\x1c%&\n\n\n\x02\x04\x02\x12\x04\x1f\0&\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03\x1f\x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x20\x08\x1c\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x20\x08\x1f\x15\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x20\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x20\x0f\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x1a\x1b\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03!\x08\x19\n\r\n\x05\x04\x02\x02\x01\
    \x04\x12\x04!\x08\x20\x1c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03!\x08\
    \x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03!\x0f\x14\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03!\x17\x18\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\"\
    \x08\x1a\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\"\x08!\x19\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x03\"\x08\x0c\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\"\r\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\"\x18\x19\n\x0b\
    \n\x04\x04\x02\x02\x03\x12\x03#\x08\x1a\n\r\n\x05\x04\x02\x02\x03\x04\
    \x12\x04#\x08\"\x1a\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03#\x08\x0c\n\
    \x0c\n\x05\x04\x02\x02\x03\x01\x12\x03#\r\x13\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x03#\x18\x19\n\x0b\n\x04\x04\x02\x02\x04\x12\x03$\x08\x1a\n\
    \r\n\x05\x04\x02\x02\x04\x04\x12\x04$\x08#\x1a\n\x0c\n\x05\x04\x02\x02\
    \x04\x05\x12\x03$\x08\x0e\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03$\x0f\
    \x14\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03$\x18\x19\n\x0b\n\x04\x04\
    \x02\x02\x05\x12\x03%\x08\x1a\n\r\n\x05\x04\x02\x02\x05\x04\x12\x04%\x08\
    $\x1a\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03%\x08\x0e\n\x0c\n\x05\x04\
    \x02\x02\x05\x01\x12\x03%\x0f\x15\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\
    \x03%\x18\x19\n\n\n\x02\x04\x03\x12\x04(\0+\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03(\x08\x13\n\x0b\n\x04\x04\x03\x02\0\x12\x03)\x08\x20\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04)\x08(\x15\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03)\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03)\x0f\x12\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03)\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x01\x12\x03*\
    \x08\x20\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04*\x08)\x20\n\x0c\n\x05\x04\
    \x03\x02\x01\x06\x12\x03*\x08\x13\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03*\x14\x1b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03*\x1e\x1f\n\n\n\x02\
    \x04\x04\x12\x04-\0/\x01\n\n\n\x03\x04\x04\x01\x12\x03-\x08\x14\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03.\x08$\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03.\
    \x08\x10\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03.\x11\x17\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03.\x18\x1f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03.\"\
    #\n\n\n\x02\x04\x05\x12\x041\08\x01\n\n\n\x03\x04\x05\x01\x12\x031\x08\
    \x14\n\x0b\n\x04\x04\x05\x02\0\x12\x032\x08\x1c\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x042\x081\x16\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x032\x08\x0e\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x032\x0f\x17\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x032\x1a\x1b\n\x0b\n\x04\x04\x05\x02\x01\x12\x033\x08\x19\n\r\n\
    \x05\x04\x05\x02\x01\x04\x12\x043\x082\x1c\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x033\x08\x0e\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x033\x0f\x14\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x033\x17\x18\n\x18\n\x04\x04\x05\x02\
    \x02\x12\x035\x08\x19\x1a\x0b\x20time.Time\n\n\r\n\x05\x04\x05\x02\x02\
    \x04\x12\x045\x083\x19\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x035\x08\r\n\
    \x0c\n\x05\x04\x05\x02\x02\x01\x12\x035\x0e\x14\n\x0c\n\x05\x04\x05\x02\
    \x02\x03\x12\x035\x17\x18\n\x1c\n\x04\x04\x05\x02\x03\x12\x037\x08\x16\
    \x1a\x0f\x20time.Duration\n\n\r\n\x05\x04\x05\x02\x03\x04\x12\x047\x085\
    \x19\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x037\x08\r\n\x0c\n\x05\x04\x05\
    \x02\x03\x01\x12\x037\x0e\x11\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x037\
    \x14\x15\n\n\n\x02\x04\x06\x12\x04:\0=\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    :\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\x03;\x08!\n\r\n\x05\x04\x06\x02\
    \0\x04\x12\x04;\x08:\x16\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03;\x08\x0e\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03;\x0f\x15\n\x0c\n\x05\x04\x06\x02\
    \0\x03\x12\x03;\x1f\x20\n\x0b\n\x04\x04\x06\x02\x01\x12\x03<\x08!\n\r\n\
    \x05\x04\x06\x02\x01\x04\x12\x04<\x08;!\n\x0c\n\x05\x04\x06\x02\x01\x06\
    \x12\x03<\x08\x14\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03<\x15\x1c\n\x0c\
    \n\x05\x04\x06\x02\x01\x03\x12\x03<\x1f\x20\n\t\n\x02\x04\x07\x12\x03?\0\
    \x18\n\n\n\x03\x04\x07\x01\x12\x03?\x08\x15\n\n\n\x02\x04\x08\x12\x04A\0\
    D\x01\n\n\n\x03\x04\x08\x01\x12\x03A\x08\x15\n\x0b\n\x04\x04\x08\x02\0\
    \x12\x03B\x08\x1c\n\r\n\x05\x04\x08\x02\0\x04\x12\x04B\x08A\x17\n\x0c\n\
    \x05\x04\x08\x02\0\x05\x12\x03B\x08\x0e\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03B\x0f\x17\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03B\x1a\x1b\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03C\x08\x19\n\r\n\x05\x04\x08\x02\x01\x04\x12\
    \x04C\x08B\x1c\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03C\x08\x0e\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03C\x0f\x14\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03C\x17\x18\n\n\n\x02\x04\t\x12\x04F\0I\x01\n\n\n\x03\x04\t\
    \x01\x12\x03F\x08\x15\n\x0b\n\x04\x04\t\x02\0\x12\x03G\x08\"\n\r\n\x05\
    \x04\t\x02\0\x04\x12\x04G\x08F\x17\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03G\
    \x08\x0e\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03G\x0f\x12\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x03G\x20!\n\x0b\n\x04\x04\t\x02\x01\x12\x03H\x08\"\n\r\n\
    \x05\x04\t\x02\x01\x04\x12\x04H\x08G\"\n\x0c\n\x05\x04\t\x02\x01\x06\x12\
    \x03H\x08\x15\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03H\x16\x1d\n\x0c\n\x05\
    \x04\t\x02\x01\x03\x12\x03H\x20!\n\t\n\x02\x04\n\x12\x03K\0\x19\n\n\n\
    \x03\x04\n\x01\x12\x03K\x08\x16\n\n\n\x02\x04\x0b\x12\x04M\0T\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03M\x08\x13\n\x0b\n\x04\x04\x0b\x02\0\x12\x03N\x08\
    \x1c\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04N\x08M\x15\n\x0c\n\x05\x04\x0b\
    \x02\0\x05\x12\x03N\x08\x0e\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03N\x0f\
    \x17\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03N\x1a\x1b\n\x0b\n\x04\x04\x0b\
    \x02\x01\x12\x03O\x08\x19\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04O\x08N\
    \x1c\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03O\x08\x0e\n\x0c\n\x05\x04\
    \x0b\x02\x01\x01\x12\x03O\x0f\x14\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\
    \x03O\x17\x18\n\x0b\n\x04\x04\x0b\x02\x02\x12\x03P\x08\x1c\n\r\n\x05\x04\
    \x0b\x02\x02\x04\x12\x04P\x08O\x19\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\
    \x03P\x08\x0e\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\x03P\x0f\x15\n\x0c\n\
    \x05\x04\x0b\x02\x02\x03\x12\x03P\x1a\x1b\n\x0b\n\x04\x04\x0b\x02\x03\
    \x12\x03Q\x08\x1c\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04Q\x08P\x1c\n\x0c\
    \n\x05\x04\x0b\x02\x03\x05\x12\x03Q\x08\x0e\n\x0c\n\x05\x04\x0b\x02\x03\
    \x01\x12\x03Q\x0f\x15\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\x03Q\x1a\x1b\n\
    \x0b\n\x04\x04\x0b\x02\x04\x12\x03R\x08\x1a\n\r\n\x05\x04\x0b\x02\x04\
    \x04\x12\x04R\x08Q\x1c\n\x0c\n\x05\x04\x0b\x02\x04\x05\x12\x03R\x08\x0e\
    \n\x0c\n\x05\x04\x0b\x02\x04\x01\x12\x03R\x0f\x14\n\x0c\n\x05\x04\x0b\
    \x02\x04\x03\x12\x03R\x18\x19\n\x0b\n\x04\x04\x0b\x02\x05\x12\x03S\x08\
    \x1a\n\r\n\x05\x04\x0b\x02\x05\x04\x12\x04S\x08R\x1a\n\x0c\n\x05\x04\x0b\
    \x02\x05\x05\x12\x03S\x08\x0e\n\x0c\n\x05\x04\x0b\x02\x05\x01\x12\x03S\
    \x0f\x15\n\x0c\n\x05\x04\x0b\x02\x05\x03\x12\x03S\x18\x19\n\n\n\x02\x04\
    \x0c\x12\x04W\0Y\x01\n\n\n\x03\x04\x0c\x01\x12\x03W\x08\x13\n\x0b\n\x04\
    \x04\x0c\x02\0\x12\x03X\x08\x20\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04X\x08\
    W\x15\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03X\x08\x13\n\x0c\n\x05\x04\x0c\
    \x02\0\x01\x12\x03X\x14\x1b\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03X\x1e\
    \x1f\n\n\n\x02\x04\r\x12\x04[\0^\x01\n\n\n\x03\x04\r\x01\x12\x03[\x08\
    \x14\n)\n\x03\x04\r\t\x12\x03\\\x11\x13\"\x1drepeated\x20Record\x20recor\
    ds\x20=\x201;\n\n\x0b\n\x04\x04\r\t\0\x12\x03\\\x11\x12\n\x0c\n\x05\x04\
    \r\t\0\x01\x12\x03\\\x11\x12\n\x0c\n\x05\x04\r\t\0\x02\x12\x03\\\x11\x12\
    \n\x0b\n\x04\x04\r\x02\0\x12\x03]\x08!\n\x0c\n\x05\x04\r\x02\0\x04\x12\
    \x03]\x08\x10\n\x0c\n\x05\x04\r\x02\0\x05\x12\x03]\x11\x17\n\x0c\n\x05\
    \x04\r\x02\0\x01\x12\x03]\x18\x1c\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03]\
    \x1f\x20\n\t\n\x02\x04\x0e\x12\x03`\0\x1b\n\n\n\x03\x04\x0e\x01\x12\x03`\
    \x08\x18\n\n\n\x02\x04\x0f\x12\x04b\0d\x01\n\n\n\x03\x04\x0f\x01\x12\x03\
    b\x08\x19\n\x0b\n\x04\x04\x0f\x02\0\x12\x03c\x08&\n\x0c\n\x05\x04\x0f\
    \x02\0\x04\x12\x03c\x08\x10\n\x0c\n\x05\x04\x0f\x02\0\x05\x12\x03c\x11\
    \x17\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03c\x18!\n\x0c\n\x05\x04\x0f\x02\
    \0\x03\x12\x03c$%\n\n\n\x02\x04\x10\x12\x04f\0h\x01\n\n\n\x03\x04\x10\
    \x01\x12\x03f\x08\x15\n\x0b\n\x04\x04\x10\x02\0\x12\x03g\x08\x1c\n\r\n\
    \x05\x04\x10\x02\0\x04\x12\x04g\x08f\x17\n\x0c\n\x05\x04\x10\x02\0\x05\
    \x12\x03g\x08\x0e\n\x0c\n\x05\x04\x10\x02\0\x01\x12\x03g\x0f\x17\n\x0c\n\
    \x05\x04\x10\x02\0\x03\x12\x03g\x1a\x1b\n\n\n\x02\x04\x11\x12\x04j\0l\
    \x01\n\n\n\x03\x04\x11\x01\x12\x03j\x08\x16\n\x0b\n\x04\x04\x11\x02\0\
    \x12\x03k\x08#\n\x0c\n\x05\x04\x11\x02\0\x04\x12\x03k\x08\x10\n\x0c\n\
    \x05\x04\x11\x02\0\x05\x12\x03k\x11\x17\n\x0c\n\x05\x04\x11\x02\0\x01\
    \x12\x03k\x18\x1e\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03k!\"b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
