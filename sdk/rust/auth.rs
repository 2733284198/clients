// This file is generated by rust-protobuf 2.13.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `auth/auth.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_13_0;

#[derive(PartialEq,Clone,Default)]
pub struct Token {
    // message fields
    pub token: ::std::string::String,
    pub field_type: ::std::string::String,
    pub created: i64,
    pub expiry: i64,
    pub subject: ::std::string::String,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Token {
    fn default() -> &'a Token {
        <Token as ::protobuf::Message>::default_instance()
    }
}

impl Token {
    pub fn new() -> Token {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // int64 created = 3;


    pub fn get_created(&self) -> i64 {
        self.created
    }
    pub fn clear_created(&mut self) {
        self.created = 0;
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: i64) {
        self.created = v;
    }

    // int64 expiry = 4;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }

    // string subject = 5;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // repeated string roles = 6;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // repeated .go.micro.auth.Token.MetadataEntry metadata = 7;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // string namespace = 8;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Token {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.created = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::value_size(3, self.created, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(4, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.subject);
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.metadata);
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if self.created != 0 {
            os.write_int64(3, self.created)?;
        }
        if self.expiry != 0 {
            os.write_int64(4, self.expiry)?;
        }
        if !self.subject.is_empty() {
            os.write_string(5, &self.subject)?;
        }
        for v in &self.roles {
            os.write_string(6, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.metadata, os)?;
        if !self.namespace.is_empty() {
            os.write_string(8, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Token {
        Token::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token",
                    |m: &Token| { &m.token },
                    |m: &mut Token| { &mut m.token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &Token| { &m.field_type },
                    |m: &mut Token| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "created",
                    |m: &Token| { &m.created },
                    |m: &mut Token| { &mut m.created },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "expiry",
                    |m: &Token| { &m.expiry },
                    |m: &mut Token| { &mut m.expiry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &Token| { &m.subject },
                    |m: &mut Token| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roles",
                    |m: &Token| { &m.roles },
                    |m: &mut Token| { &mut m.roles },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "metadata",
                    |m: &Token| { &m.metadata },
                    |m: &mut Token| { &mut m.metadata },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "namespace",
                    |m: &Token| { &m.namespace },
                    |m: &mut Token| { &mut m.namespace },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Token>(
                    "Token",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Token {
        static mut instance: ::protobuf::lazy::Lazy<Token> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Token::new)
        }
    }
}

impl ::protobuf::Clear for Token {
    fn clear(&mut self) {
        self.token.clear();
        self.field_type.clear();
        self.created = 0;
        self.expiry = 0;
        self.subject.clear();
        self.roles.clear();
        self.metadata.clear();
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Token {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Token {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub id: ::std::string::String,
    pub secret: ::protobuf::SingularPtrField<Token>,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .go.micro.auth.Token secret = 2;


    pub fn get_secret(&self) -> &Token {
        self.secret.as_ref().unwrap_or_else(|| Token::default_instance())
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    pub fn has_secret(&self) -> bool {
        self.secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: Token) {
        self.secret = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut Token {
        if self.secret.is_none() {
            self.secret.set_default();
        }
        self.secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_secret(&mut self) -> Token {
        self.secret.take().unwrap_or_else(|| Token::new())
    }

    // repeated string roles = 3;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // repeated .go.micro.auth.Account.MetadataEntry metadata = 4;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // string namespace = 5;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.secret {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secret)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(ref v) = self.secret.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.metadata);
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(ref v) = self.secret.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.roles {
            os.write_string(3, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.metadata, os)?;
        if !self.namespace.is_empty() {
            os.write_string(5, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Account| { &m.id },
                    |m: &mut Account| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Token>>(
                    "secret",
                    |m: &Account| { &m.secret },
                    |m: &mut Account| { &mut m.secret },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roles",
                    |m: &Account| { &m.roles },
                    |m: &mut Account| { &mut m.roles },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "metadata",
                    |m: &Account| { &m.metadata },
                    |m: &mut Account| { &mut m.metadata },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "namespace",
                    |m: &Account| { &m.namespace },
                    |m: &mut Account| { &mut m.namespace },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                    "Account",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Account {
        static mut instance: ::protobuf::lazy::Lazy<Account> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Account::new)
        }
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.id.clear();
        self.secret.clear();
        self.roles.clear();
        self.metadata.clear();
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub endpoint: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string endpoint = 3;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.endpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(3, &self.endpoint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Resource| { &m.name },
                    |m: &mut Resource| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &Resource| { &m.field_type },
                    |m: &mut Resource| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "endpoint",
                    |m: &Resource| { &m.endpoint },
                    |m: &mut Resource| { &mut m.endpoint },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource>(
                    "Resource",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Resource {
        static mut instance: ::protobuf::lazy::Lazy<Resource> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Resource::new)
        }
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.endpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateRequest {
    // message fields
    pub id: ::std::string::String,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub secret_expiry: i64,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateRequest {
    fn default() -> &'a GenerateRequest {
        <GenerateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateRequest {
    pub fn new() -> GenerateRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated string roles = 2;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // repeated .go.micro.auth.GenerateRequest.MetadataEntry metadata = 3;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // int64 secret_expiry = 4;


    pub fn get_secret_expiry(&self) -> i64 {
        self.secret_expiry
    }
    pub fn clear_secret_expiry(&mut self) {
        self.secret_expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_secret_expiry(&mut self, v: i64) {
        self.secret_expiry = v;
    }

    // string namespace = 5;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenerateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.secret_expiry = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata);
        if self.secret_expiry != 0 {
            my_size += ::protobuf::rt::value_size(4, self.secret_expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.roles {
            os.write_string(2, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata, os)?;
        if self.secret_expiry != 0 {
            os.write_int64(4, self.secret_expiry)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(5, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateRequest {
        GenerateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GenerateRequest| { &m.id },
                    |m: &mut GenerateRequest| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roles",
                    |m: &GenerateRequest| { &m.roles },
                    |m: &mut GenerateRequest| { &mut m.roles },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "metadata",
                    |m: &GenerateRequest| { &m.metadata },
                    |m: &mut GenerateRequest| { &mut m.metadata },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "secret_expiry",
                    |m: &GenerateRequest| { &m.secret_expiry },
                    |m: &mut GenerateRequest| { &mut m.secret_expiry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "namespace",
                    |m: &GenerateRequest| { &m.namespace },
                    |m: &mut GenerateRequest| { &mut m.namespace },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateRequest>(
                    "GenerateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GenerateRequest {
        static mut instance: ::protobuf::lazy::Lazy<GenerateRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(GenerateRequest::new)
        }
    }
}

impl ::protobuf::Clear for GenerateRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.roles.clear();
        self.metadata.clear();
        self.secret_expiry = 0;
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateResponse {
    // message fields
    pub account: ::protobuf::SingularPtrField<Account>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateResponse {
    fn default() -> &'a GenerateResponse {
        <GenerateResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenerateResponse {
    pub fn new() -> GenerateResponse {
        ::std::default::Default::default()
    }

    // .go.micro.auth.Account account = 1;


    pub fn get_account(&self) -> &Account {
        self.account.as_ref().unwrap_or_else(|| Account::default_instance())
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: Account) {
        self.account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut Account {
        if self.account.is_none() {
            self.account.set_default();
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> Account {
        self.account.take().unwrap_or_else(|| Account::new())
    }
}

impl ::protobuf::Message for GenerateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateResponse {
        GenerateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Account>>(
                    "account",
                    |m: &GenerateResponse| { &m.account },
                    |m: &mut GenerateResponse| { &mut m.account },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateResponse>(
                    "GenerateResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GenerateResponse {
        static mut instance: ::protobuf::lazy::Lazy<GenerateResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(GenerateResponse::new)
        }
    }
}

impl ::protobuf::Clear for GenerateResponse {
    fn clear(&mut self) {
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantRequest {
    // message fields
    pub role: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantRequest {
    fn default() -> &'a GrantRequest {
        <GrantRequest as ::protobuf::Message>::default_instance()
    }
}

impl GrantRequest {
    pub fn new() -> GrantRequest {
        ::std::default::Default::default()
    }

    // string role = 1;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // .go.micro.auth.Resource resource = 2;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }
}

impl ::protobuf::Message for GrantRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantRequest {
        GrantRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role",
                    |m: &GrantRequest| { &m.role },
                    |m: &mut GrantRequest| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "resource",
                    |m: &GrantRequest| { &m.resource },
                    |m: &mut GrantRequest| { &mut m.resource },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrantRequest>(
                    "GrantRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrantRequest {
        static mut instance: ::protobuf::lazy::Lazy<GrantRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(GrantRequest::new)
        }
    }
}

impl ::protobuf::Clear for GrantRequest {
    fn clear(&mut self) {
        self.role.clear();
        self.resource.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrantRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantResponse {
    fn default() -> &'a GrantResponse {
        <GrantResponse as ::protobuf::Message>::default_instance()
    }
}

impl GrantResponse {
    pub fn new() -> GrantResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GrantResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantResponse {
        GrantResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrantResponse>(
                    "GrantResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GrantResponse {
        static mut instance: ::protobuf::lazy::Lazy<GrantResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(GrantResponse::new)
        }
    }
}

impl ::protobuf::Clear for GrantResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrantResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeRequest {
    // message fields
    pub role: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevokeRequest {
    fn default() -> &'a RevokeRequest {
        <RevokeRequest as ::protobuf::Message>::default_instance()
    }
}

impl RevokeRequest {
    pub fn new() -> RevokeRequest {
        ::std::default::Default::default()
    }

    // string role = 1;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // .go.micro.auth.Resource resource = 2;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| Resource::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }
}

impl ::protobuf::Message for RevokeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeRequest {
        RevokeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role",
                    |m: &RevokeRequest| { &m.role },
                    |m: &mut RevokeRequest| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                    "resource",
                    |m: &RevokeRequest| { &m.resource },
                    |m: &mut RevokeRequest| { &mut m.resource },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevokeRequest>(
                    "RevokeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RevokeRequest {
        static mut instance: ::protobuf::lazy::Lazy<RevokeRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RevokeRequest::new)
        }
    }
}

impl ::protobuf::Clear for RevokeRequest {
    fn clear(&mut self) {
        self.role.clear();
        self.resource.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevokeResponse {
    fn default() -> &'a RevokeResponse {
        <RevokeResponse as ::protobuf::Message>::default_instance()
    }
}

impl RevokeResponse {
    pub fn new() -> RevokeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RevokeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeResponse {
        RevokeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevokeResponse>(
                    "RevokeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RevokeResponse {
        static mut instance: ::protobuf::lazy::Lazy<RevokeResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RevokeResponse::new)
        }
    }
}

impl ::protobuf::Clear for RevokeResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InspectRequest {
    // message fields
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InspectRequest {
    fn default() -> &'a InspectRequest {
        <InspectRequest as ::protobuf::Message>::default_instance()
    }
}

impl InspectRequest {
    pub fn new() -> InspectRequest {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InspectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InspectRequest {
        InspectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token",
                    |m: &InspectRequest| { &m.token },
                    |m: &mut InspectRequest| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<InspectRequest>(
                    "InspectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InspectRequest {
        static mut instance: ::protobuf::lazy::Lazy<InspectRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(InspectRequest::new)
        }
    }
}

impl ::protobuf::Clear for InspectRequest {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InspectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InspectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InspectResponse {
    // message fields
    pub account: ::protobuf::SingularPtrField<Account>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InspectResponse {
    fn default() -> &'a InspectResponse {
        <InspectResponse as ::protobuf::Message>::default_instance()
    }
}

impl InspectResponse {
    pub fn new() -> InspectResponse {
        ::std::default::Default::default()
    }

    // .go.micro.auth.Account account = 1;


    pub fn get_account(&self) -> &Account {
        self.account.as_ref().unwrap_or_else(|| Account::default_instance())
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: Account) {
        self.account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut Account {
        if self.account.is_none() {
            self.account.set_default();
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> Account {
        self.account.take().unwrap_or_else(|| Account::new())
    }
}

impl ::protobuf::Message for InspectResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InspectResponse {
        InspectResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Account>>(
                    "account",
                    |m: &InspectResponse| { &m.account },
                    |m: &mut InspectResponse| { &mut m.account },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<InspectResponse>(
                    "InspectResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InspectResponse {
        static mut instance: ::protobuf::lazy::Lazy<InspectResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(InspectResponse::new)
        }
    }
}

impl ::protobuf::Clear for InspectResponse {
    fn clear(&mut self) {
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InspectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InspectResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshRequest {
    // message fields
    pub secret: ::std::string::String,
    pub token_expiry: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshRequest {
    fn default() -> &'a RefreshRequest {
        <RefreshRequest as ::protobuf::Message>::default_instance()
    }
}

impl RefreshRequest {
    pub fn new() -> RefreshRequest {
        ::std::default::Default::default()
    }

    // string secret = 1;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }

    // int64 token_expiry = 2;


    pub fn get_token_expiry(&self) -> i64 {
        self.token_expiry
    }
    pub fn clear_token_expiry(&mut self) {
        self.token_expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_token_expiry(&mut self, v: i64) {
        self.token_expiry = v;
    }
}

impl ::protobuf::Message for RefreshRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.token_expiry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.secret);
        }
        if self.token_expiry != 0 {
            my_size += ::protobuf::rt::value_size(2, self.token_expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.secret.is_empty() {
            os.write_string(1, &self.secret)?;
        }
        if self.token_expiry != 0 {
            os.write_int64(2, self.token_expiry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshRequest {
        RefreshRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "secret",
                    |m: &RefreshRequest| { &m.secret },
                    |m: &mut RefreshRequest| { &mut m.secret },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "token_expiry",
                    |m: &RefreshRequest| { &m.token_expiry },
                    |m: &mut RefreshRequest| { &mut m.token_expiry },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshRequest>(
                    "RefreshRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RefreshRequest {
        static mut instance: ::protobuf::lazy::Lazy<RefreshRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RefreshRequest::new)
        }
    }
}

impl ::protobuf::Clear for RefreshRequest {
    fn clear(&mut self) {
        self.secret.clear();
        self.token_expiry = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshResponse {
    // message fields
    pub token: ::protobuf::SingularPtrField<Token>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshResponse {
    fn default() -> &'a RefreshResponse {
        <RefreshResponse as ::protobuf::Message>::default_instance()
    }
}

impl RefreshResponse {
    pub fn new() -> RefreshResponse {
        ::std::default::Default::default()
    }

    // .go.micro.auth.Token token = 1;


    pub fn get_token(&self) -> &Token {
        self.token.as_ref().unwrap_or_else(|| Token::default_instance())
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: Token) {
        self.token = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut Token {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> Token {
        self.token.take().unwrap_or_else(|| Token::new())
    }
}

impl ::protobuf::Message for RefreshResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.token {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.token.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshResponse {
        RefreshResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Token>>(
                    "token",
                    |m: &RefreshResponse| { &m.token },
                    |m: &mut RefreshResponse| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshResponse>(
                    "RefreshResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RefreshResponse {
        static mut instance: ::protobuf::lazy::Lazy<RefreshResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RefreshResponse::new)
        }
    }
}

impl ::protobuf::Clear for RefreshResponse {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fauth/auth.proto\x12\rgo.micro.auth\"\xae\x02\n\x05Token\x12\x14\n\
    \x05token\x18\x01\x20\x01(\tR\x05token\x12\x12\n\x04type\x18\x02\x20\x01\
    (\tR\x04type\x12\x18\n\x07created\x18\x03\x20\x01(\x03R\x07created\x12\
    \x16\n\x06expiry\x18\x04\x20\x01(\x03R\x06expiry\x12\x18\n\x07subject\
    \x18\x05\x20\x01(\tR\x07subject\x12\x14\n\x05roles\x18\x06\x20\x03(\tR\
    \x05roles\x12>\n\x08metadata\x18\x07\x20\x03(\x0b2\".go.micro.auth.Token\
    .MetadataEntryR\x08metadata\x12\x1c\n\tnamespace\x18\x08\x20\x01(\tR\tna\
    mespace\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xfa\x01\n\
    \x07Account\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12,\n\x06secret\
    \x18\x02\x20\x01(\x0b2\x14.go.micro.auth.TokenR\x06secret\x12\x14\n\x05r\
    oles\x18\x03\x20\x03(\tR\x05roles\x12@\n\x08metadata\x18\x04\x20\x03(\
    \x0b2$.go.micro.auth.Account.MetadataEntryR\x08metadata\x12\x1c\n\tnames\
    pace\x18\x05\x20\x01(\tR\tnamespace\x1a;\n\rMetadataEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05\
    value:\x028\x01\"N\n\x08Resource\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x1a\n\x08endp\
    oint\x18\x03\x20\x01(\tR\x08endpoint\"\x81\x02\n\x0fGenerateRequest\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05roles\x18\x02\x20\
    \x03(\tR\x05roles\x12H\n\x08metadata\x18\x03\x20\x03(\x0b2,.go.micro.aut\
    h.GenerateRequest.MetadataEntryR\x08metadata\x12#\n\rsecret_expiry\x18\
    \x04\x20\x01(\x03R\x0csecretExpiry\x12\x1c\n\tnamespace\x18\x05\x20\x01(\
    \tR\tnamespace\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"D\n\
    \x10GenerateResponse\x120\n\x07account\x18\x01\x20\x01(\x0b2\x16.go.micr\
    o.auth.AccountR\x07account\"W\n\x0cGrantRequest\x12\x12\n\x04role\x18\
    \x01\x20\x01(\tR\x04role\x123\n\x08resource\x18\x02\x20\x01(\x0b2\x17.go\
    .micro.auth.ResourceR\x08resource\"\x0f\n\rGrantResponse\"X\n\rRevokeReq\
    uest\x12\x12\n\x04role\x18\x01\x20\x01(\tR\x04role\x123\n\x08resource\
    \x18\x02\x20\x01(\x0b2\x17.go.micro.auth.ResourceR\x08resource\"\x10\n\
    \x0eRevokeResponse\"&\n\x0eInspectRequest\x12\x14\n\x05token\x18\x01\x20\
    \x01(\tR\x05token\"C\n\x0fInspectResponse\x120\n\x07account\x18\x01\x20\
    \x01(\x0b2\x16.go.micro.auth.AccountR\x07account\"K\n\x0eRefreshRequest\
    \x12\x16\n\x06secret\x18\x01\x20\x01(\tR\x06secret\x12!\n\x0ctoken_expir\
    y\x18\x02\x20\x01(\x03R\x0btokenExpiry\"=\n\x0fRefreshResponse\x12*\n\
    \x05token\x18\x01\x20\x01(\x0b2\x14.go.micro.auth.TokenR\x05token2\xed\
    \x01\n\x04Auth\x12M\n\x08Generate\x12\x1e.go.micro.auth.GenerateRequest\
    \x1a\x1f.go.micro.auth.GenerateResponse\"\0\x12J\n\x07Inspect\x12\x1d.go\
    .micro.auth.InspectRequest\x1a\x1e.go.micro.auth.InspectResponse\"\0\x12\
    J\n\x07Refresh\x12\x1d.go.micro.auth.RefreshRequest\x1a\x1e.go.micro.aut\
    h.RefreshResponse\"\0B\x0bZ\tauth;authJ\x9b\x15\n\x06\x12\x04\0\0N\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x15\n\x08\
    \n\x01\x08\x12\x03\x04\0\x20\n\t\n\x02\x08\x0b\x12\x03\x04\0\x20\n\n\n\
    \x02\x06\0\x12\x04\x06\0\n\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x0c\n\
    \x0b\n\x04\x06\0\x02\0\x12\x03\x07\x08C\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x07\x0c\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x15$\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x07/?\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x08\
    \x08A\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x0c\x13\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03\x08\x14\"\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x08.=\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x08A\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03\t\x0c\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\t\x14\"\
    \n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t.=\n\n\n\x02\x04\0\x12\x04\x0c\0\
    \x15\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\r\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\r\x08\x19\n\r\n\x05\x04\0\x02\0\x04\x12\x04\r\x08\x0c\x0f\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\r\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\r\x0f\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x0e\x08\x18\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\
    \x0e\x08\r\x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x0e\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0e\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0f\x08\x1a\n\r\n\
    \x05\x04\0\x02\x02\x04\x12\x04\x0f\x08\x0e\x18\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x0f\x08\r\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0f\x0e\x15\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0f\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x10\x08\x19\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x10\x08\x0f\
    \x1a\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x10\x08\r\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\x10\x0e\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x10\x17\x18\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x11\x08\x1b\n\r\n\x05\x04\
    \0\x02\x04\x04\x12\x04\x11\x08\x10\x19\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\x11\x08\x0e\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x11\x0f\x16\n\x0c\
    \n\x05\x04\0\x02\x04\x03\x12\x03\x11\x19\x1a\n\x0b\n\x04\x04\0\x02\x05\
    \x12\x03\x12\x08\"\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x12\x08\x10\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x12\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x12\x18\x1d\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x12\
    \x20!\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x13\x08)\n\r\n\x05\x04\0\x02\x06\
    \x04\x12\x04\x13\x08\x12\"\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x13\x08\
    \x1b\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x13\x1c$\n\x0c\n\x05\x04\0\
    \x02\x06\x03\x12\x03\x13'(\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x14\x08\x1d\
    \n\r\n\x05\x04\0\x02\x07\x04\x12\x04\x14\x08\x13)\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x14\
    \x0f\x18\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x14\x1b\x1c\n\n\n\x02\x04\
    \x01\x12\x04\x17\0\x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\x0f\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x08\x16\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04\x18\x08\x17\x11\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x18\x08\
    \x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x18\x0f\x11\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x18\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\
    \x19\x08\x19\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x19\x08\x18\x16\n\x0c\
    \n\x05\x04\x01\x02\x01\x06\x12\x03\x19\x08\r\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x19\x0e\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x19\x17\
    \x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1a\x08\"\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\
    \x1a\x11\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1a\x18\x1d\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x1a\x20!\n\x0b\n\x04\x04\x01\x02\x03\
    \x12\x03\x1b\x08)\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x1b\x08\x1a\"\n\
    \x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x1b\x08\x1b\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x1b\x1c$\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\
    \x1b'(\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x1c\x08\x1d\n\r\n\x05\x04\x01\
    \x02\x04\x04\x12\x04\x1c\x08\x1b)\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\
    \x03\x1c\x08\x0e\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x1c\x0f\x18\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1c\x1b\x1c\n\n\n\x02\x04\x02\x12\
    \x04\x1f\0#\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x10\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x20\x08\x18\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \x20\x08\x1f\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\x08\x0e\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x20\x0f\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x20\x16\x17\n\x0b\n\x04\x04\x02\x02\x01\x12\x03!\x08\x18\n\
    \r\n\x05\x04\x02\x02\x01\x04\x12\x04!\x08\x20\x18\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03!\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03!\
    \x0f\x13\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03!\x16\x17\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\"\x08\x1c\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\
    \"\x08!\x18\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\"\x08\x0e\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03\"\x0f\x17\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\"\x1a\x1b\n\n\n\x02\x04\x03\x12\x04%\0+\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03%\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03&\x08\x16\n\r\
    \n\x05\x04\x03\x02\0\x04\x12\x04&\x08%\x19\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03&\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03&\x0f\x11\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03&\x14\x15\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03'\x08\"\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03'\x08\x10\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03'\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03'\x18\x1d\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03'\x20!\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x03(\x08)\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\
    (\x08'\"\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03(\x08\x1b\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03(\x1c$\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03('(\n\x0b\n\x04\x04\x03\x02\x03\x12\x03)\x08\x20\n\r\n\x05\x04\x03\
    \x02\x03\x04\x12\x04)\x08()\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03)\x08\
    \r\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03)\x0e\x1b\n\x0c\n\x05\x04\x03\
    \x02\x03\x03\x12\x03)\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x04\x12\x03*\x08\
    \x1d\n\r\n\x05\x04\x03\x02\x04\x04\x12\x04*\x08)\x20\n\x0c\n\x05\x04\x03\
    \x02\x04\x05\x12\x03*\x08\x0e\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03*\
    \x0f\x18\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03*\x1b\x1c\n\n\n\x02\x04\
    \x04\x12\x04-\0/\x01\n\n\n\x03\x04\x04\x01\x12\x03-\x08\x18\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03.\x08\x1c\n\r\n\x05\x04\x04\x02\0\x04\x12\x04.\x08\
    -\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03.\x08\x0f\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03.\x10\x17\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03.\x1a\
    \x1b\n\n\n\x02\x04\x05\x12\x041\04\x01\n\n\n\x03\x04\x05\x01\x12\x031\
    \x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x032\x08\x18\n\r\n\x05\x04\x05\
    \x02\0\x04\x12\x042\x081\x16\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x032\x08\
    \x0e\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x032\x0f\x13\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x032\x16\x17\n\x0b\n\x04\x04\x05\x02\x01\x12\x033\x08\x1e\
    \n\r\n\x05\x04\x05\x02\x01\x04\x12\x043\x082\x18\n\x0c\n\x05\x04\x05\x02\
    \x01\x06\x12\x033\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x033\x11\
    \x19\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x033\x1c\x1d\n\t\n\x02\x04\x06\
    \x12\x036\0\x18\n\n\n\x03\x04\x06\x01\x12\x036\x08\x15\n\n\n\x02\x04\x07\
    \x12\x048\0;\x01\n\n\n\x03\x04\x07\x01\x12\x038\x08\x15\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x039\x08\x18\n\r\n\x05\x04\x07\x02\0\x04\x12\x049\x088\
    \x17\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x039\x08\x0e\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x039\x0f\x13\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x039\x16\
    \x17\n\x0b\n\x04\x04\x07\x02\x01\x12\x03:\x08\x1e\n\r\n\x05\x04\x07\x02\
    \x01\x04\x12\x04:\x089\x18\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03:\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03:\x11\x19\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03:\x1c\x1d\n\t\n\x02\x04\x08\x12\x03=\0\x19\n\n\n\
    \x03\x04\x08\x01\x12\x03=\x08\x16\n\n\n\x02\x04\t\x12\x04?\0A\x01\n\n\n\
    \x03\x04\t\x01\x12\x03?\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\x03@\x08\x19\
    \n\r\n\x05\x04\t\x02\0\x04\x12\x04@\x08?\x18\n\x0c\n\x05\x04\t\x02\0\x05\
    \x12\x03@\x08\x0e\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03@\x0f\x14\n\x0c\n\
    \x05\x04\t\x02\0\x03\x12\x03@\x17\x18\n\n\n\x02\x04\n\x12\x04C\0E\x01\n\
    \n\n\x03\x04\n\x01\x12\x03C\x08\x17\n\x0b\n\x04\x04\n\x02\0\x12\x03D\x08\
    \x1c\n\r\n\x05\x04\n\x02\0\x04\x12\x04D\x08C\x19\n\x0c\n\x05\x04\n\x02\0\
    \x06\x12\x03D\x08\x0f\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03D\x10\x17\n\x0c\
    \n\x05\x04\n\x02\0\x03\x12\x03D\x1a\x1b\n\n\n\x02\x04\x0b\x12\x04G\0J\
    \x01\n\n\n\x03\x04\x0b\x01\x12\x03G\x08\x16\n\x0b\n\x04\x04\x0b\x02\0\
    \x12\x03H\x08\x1a\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04H\x08G\x18\n\x0c\n\
    \x05\x04\x0b\x02\0\x05\x12\x03H\x08\x0e\n\x0c\n\x05\x04\x0b\x02\0\x01\
    \x12\x03H\x0f\x15\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03H\x18\x19\n\x0b\n\
    \x04\x04\x0b\x02\x01\x12\x03I\x08\x1f\n\r\n\x05\x04\x0b\x02\x01\x04\x12\
    \x04I\x08H\x1a\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03I\x08\r\n\x0c\n\
    \x05\x04\x0b\x02\x01\x01\x12\x03I\x0e\x1a\n\x0c\n\x05\x04\x0b\x02\x01\
    \x03\x12\x03I\x1d\x1e\n\n\n\x02\x04\x0c\x12\x04L\0N\x01\n\n\n\x03\x04\
    \x0c\x01\x12\x03L\x08\x17\n\x0b\n\x04\x04\x0c\x02\0\x12\x03M\x08\x18\n\r\
    \n\x05\x04\x0c\x02\0\x04\x12\x04M\x08L\x19\n\x0c\n\x05\x04\x0c\x02\0\x06\
    \x12\x03M\x08\r\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03M\x0e\x13\n\x0c\n\
    \x05\x04\x0c\x02\0\x03\x12\x03M\x16\x17b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
