/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.go.micro.router.Advert', null, global);
goog.exportSymbol('proto.go.micro.router.AdvertType', null, global);
goog.exportSymbol('proto.go.micro.router.CreateResponse', null, global);
goog.exportSymbol('proto.go.micro.router.DeleteResponse', null, global);
goog.exportSymbol('proto.go.micro.router.Event', null, global);
goog.exportSymbol('proto.go.micro.router.EventType', null, global);
goog.exportSymbol('proto.go.micro.router.ListResponse', null, global);
goog.exportSymbol('proto.go.micro.router.LookupRequest', null, global);
goog.exportSymbol('proto.go.micro.router.LookupResponse', null, global);
goog.exportSymbol('proto.go.micro.router.ProcessResponse', null, global);
goog.exportSymbol('proto.go.micro.router.Query', null, global);
goog.exportSymbol('proto.go.micro.router.QueryRequest', null, global);
goog.exportSymbol('proto.go.micro.router.QueryResponse', null, global);
goog.exportSymbol('proto.go.micro.router.Request', null, global);
goog.exportSymbol('proto.go.micro.router.Response', null, global);
goog.exportSymbol('proto.go.micro.router.Route', null, global);
goog.exportSymbol('proto.go.micro.router.Solicit', null, global);
goog.exportSymbol('proto.go.micro.router.Status', null, global);
goog.exportSymbol('proto.go.micro.router.StatusResponse', null, global);
goog.exportSymbol('proto.go.micro.router.UpdateResponse', null, global);
goog.exportSymbol('proto.go.micro.router.WatchRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Request.displayName = 'proto.go.micro.router.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Request}
 */
proto.go.micro.router.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Request;
  return proto.go.micro.router.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Request}
 */
proto.go.micro.router.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Request} The clone.
 */
proto.go.micro.router.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Request} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Response.displayName = 'proto.go.micro.router.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Response.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Response}
 */
proto.go.micro.router.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Response;
  return proto.go.micro.router.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Response}
 */
proto.go.micro.router.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Response} The clone.
 */
proto.go.micro.router.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Response} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.router.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.go.micro.router.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.ListResponse.displayName = 'proto.go.micro.router.ListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.router.ListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.go.micro.router.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.ListResponse}
 */
proto.go.micro.router.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.ListResponse;
  return proto.go.micro.router.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.ListResponse}
 */
proto.go.micro.router.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Route;
      reader.readMessage(value,proto.go.micro.router.Route.deserializeBinaryFromReader);
      msg.getRoutesList().push(value);
      msg.setRoutesList(msg.getRoutesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.ListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.ListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.go.micro.router.Route.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.ListResponse} The clone.
 */
proto.go.micro.router.ListResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.ListResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Route routes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.go.micro.router.Route>}
 */
proto.go.micro.router.ListResponse.prototype.getRoutesList = function() {
  return /** @type{!Array.<!proto.go.micro.router.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.go.micro.router.Route, 1));
};


/** @param {Array.<!proto.go.micro.router.Route>} value  */
proto.go.micro.router.ListResponse.prototype.setRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.go.micro.router.ListResponse.prototype.clearRoutesList = function() {
  this.setRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.LookupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.LookupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.LookupRequest.displayName = 'proto.go.micro.router.LookupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.LookupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.LookupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.LookupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.LookupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.go.micro.router.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.LookupRequest}
 */
proto.go.micro.router.LookupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.LookupRequest;
  return proto.go.micro.router.LookupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.LookupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.LookupRequest}
 */
proto.go.micro.router.LookupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Query;
      reader.readMessage(value,proto.go.micro.router.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.LookupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.LookupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.LookupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.LookupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.router.Query.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.LookupRequest} The clone.
 */
proto.go.micro.router.LookupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.LookupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Query query = 1;
 * @return {proto.go.micro.router.Query}
 */
proto.go.micro.router.LookupRequest.prototype.getQuery = function() {
  return /** @type{proto.go.micro.router.Query} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.router.Query, 1));
};


/** @param {proto.go.micro.router.Query|undefined} value  */
proto.go.micro.router.LookupRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.router.LookupRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.router.LookupRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.LookupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.router.LookupResponse.repeatedFields_, null);
};
goog.inherits(proto.go.micro.router.LookupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.LookupResponse.displayName = 'proto.go.micro.router.LookupResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.router.LookupResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.LookupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.LookupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.LookupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.LookupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.go.micro.router.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.LookupResponse}
 */
proto.go.micro.router.LookupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.LookupResponse;
  return proto.go.micro.router.LookupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.LookupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.LookupResponse}
 */
proto.go.micro.router.LookupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Route;
      reader.readMessage(value,proto.go.micro.router.Route.deserializeBinaryFromReader);
      msg.getRoutesList().push(value);
      msg.setRoutesList(msg.getRoutesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.LookupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.LookupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.LookupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.LookupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.go.micro.router.Route.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.LookupResponse} The clone.
 */
proto.go.micro.router.LookupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.LookupResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Route routes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.go.micro.router.Route>}
 */
proto.go.micro.router.LookupResponse.prototype.getRoutesList = function() {
  return /** @type{!Array.<!proto.go.micro.router.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.go.micro.router.Route, 1));
};


/** @param {Array.<!proto.go.micro.router.Route>} value  */
proto.go.micro.router.LookupResponse.prototype.setRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.go.micro.router.LookupResponse.prototype.clearRoutesList = function() {
  this.setRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.QueryRequest.displayName = 'proto.go.micro.router.QueryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.go.micro.router.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.QueryRequest}
 */
proto.go.micro.router.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.QueryRequest;
  return proto.go.micro.router.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.QueryRequest}
 */
proto.go.micro.router.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Query;
      reader.readMessage(value,proto.go.micro.router.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.QueryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.router.Query.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.QueryRequest} The clone.
 */
proto.go.micro.router.QueryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.QueryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Query query = 1;
 * @return {proto.go.micro.router.Query}
 */
proto.go.micro.router.QueryRequest.prototype.getQuery = function() {
  return /** @type{proto.go.micro.router.Query} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.router.Query, 1));
};


/** @param {proto.go.micro.router.Query|undefined} value  */
proto.go.micro.router.QueryRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.router.QueryRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.router.QueryRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.QueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.router.QueryResponse.repeatedFields_, null);
};
goog.inherits(proto.go.micro.router.QueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.QueryResponse.displayName = 'proto.go.micro.router.QueryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.router.QueryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.QueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.QueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.QueryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.QueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.go.micro.router.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.QueryResponse}
 */
proto.go.micro.router.QueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.QueryResponse;
  return proto.go.micro.router.QueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.QueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.QueryResponse}
 */
proto.go.micro.router.QueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Route;
      reader.readMessage(value,proto.go.micro.router.Route.deserializeBinaryFromReader);
      msg.getRoutesList().push(value);
      msg.setRoutesList(msg.getRoutesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.QueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.QueryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.QueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.QueryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.go.micro.router.Route.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.QueryResponse} The clone.
 */
proto.go.micro.router.QueryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.QueryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Route routes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.go.micro.router.Route>}
 */
proto.go.micro.router.QueryResponse.prototype.getRoutesList = function() {
  return /** @type{!Array.<!proto.go.micro.router.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.go.micro.router.Route, 1));
};


/** @param {Array.<!proto.go.micro.router.Route>} value  */
proto.go.micro.router.QueryResponse.prototype.setRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.go.micro.router.QueryResponse.prototype.clearRoutesList = function() {
  this.setRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.WatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.WatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.WatchRequest.displayName = 'proto.go.micro.router.WatchRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.WatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.WatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.WatchRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.WatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.WatchRequest}
 */
proto.go.micro.router.WatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.WatchRequest;
  return proto.go.micro.router.WatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.WatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.WatchRequest}
 */
proto.go.micro.router.WatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.WatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.WatchRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.WatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.WatchRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.WatchRequest} The clone.
 */
proto.go.micro.router.WatchRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.WatchRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Advert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.router.Advert.repeatedFields_, null);
};
goog.inherits(proto.go.micro.router.Advert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Advert.displayName = 'proto.go.micro.router.Advert';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.router.Advert.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Advert.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Advert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Advert} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Advert.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    type: msg.getType(),
    timestamp: msg.getTimestamp(),
    ttl: msg.getTtl(),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.go.micro.router.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Advert}
 */
proto.go.micro.router.Advert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Advert;
  return proto.go.micro.router.Advert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Advert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Advert}
 */
proto.go.micro.router.Advert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.go.micro.router.AdvertType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    case 5:
      var value = new proto.go.micro.router.Event;
      reader.readMessage(value,proto.go.micro.router.Event.deserializeBinaryFromReader);
      msg.getEventsList().push(value);
      msg.setEventsList(msg.getEventsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Advert} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Advert.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Advert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Advert.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.go.micro.router.Event.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Advert} The clone.
 */
proto.go.micro.router.Advert.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Advert} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.go.micro.router.Advert.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.router.Advert.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional AdvertType type = 2;
 * @return {!proto.go.micro.router.AdvertType}
 */
proto.go.micro.router.Advert.prototype.getType = function() {
  return /** @type {!proto.go.micro.router.AdvertType} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.go.micro.router.AdvertType} value  */
proto.go.micro.router.Advert.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.go.micro.router.Advert.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.go.micro.router.Advert.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 ttl = 4;
 * @return {number}
 */
proto.go.micro.router.Advert.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.go.micro.router.Advert.prototype.setTtl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated Event events = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.go.micro.router.Event>}
 */
proto.go.micro.router.Advert.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.go.micro.router.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.go.micro.router.Event, 5));
};


/** @param {Array.<!proto.go.micro.router.Event>} value  */
proto.go.micro.router.Advert.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.go.micro.router.Advert.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Solicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Solicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Solicit.displayName = 'proto.go.micro.router.Solicit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Solicit.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Solicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Solicit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Solicit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Solicit}
 */
proto.go.micro.router.Solicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Solicit;
  return proto.go.micro.router.Solicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Solicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Solicit}
 */
proto.go.micro.router.Solicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Solicit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Solicit.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Solicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Solicit.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Solicit} The clone.
 */
proto.go.micro.router.Solicit.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Solicit} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.go.micro.router.Solicit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.router.Solicit.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.ProcessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.ProcessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.ProcessResponse.displayName = 'proto.go.micro.router.ProcessResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.ProcessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.ProcessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.ProcessResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.ProcessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.ProcessResponse}
 */
proto.go.micro.router.ProcessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.ProcessResponse;
  return proto.go.micro.router.ProcessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.ProcessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.ProcessResponse}
 */
proto.go.micro.router.ProcessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.ProcessResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.ProcessResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.ProcessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.ProcessResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.ProcessResponse} The clone.
 */
proto.go.micro.router.ProcessResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.ProcessResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.CreateResponse.displayName = 'proto.go.micro.router.CreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.CreateResponse}
 */
proto.go.micro.router.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.CreateResponse;
  return proto.go.micro.router.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.CreateResponse}
 */
proto.go.micro.router.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.CreateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.CreateResponse} The clone.
 */
proto.go.micro.router.CreateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.CreateResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.DeleteResponse.displayName = 'proto.go.micro.router.DeleteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.DeleteResponse}
 */
proto.go.micro.router.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.DeleteResponse;
  return proto.go.micro.router.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.DeleteResponse}
 */
proto.go.micro.router.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.DeleteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.DeleteResponse} The clone.
 */
proto.go.micro.router.DeleteResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.DeleteResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.UpdateResponse.displayName = 'proto.go.micro.router.UpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.UpdateResponse}
 */
proto.go.micro.router.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.UpdateResponse;
  return proto.go.micro.router.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.UpdateResponse}
 */
proto.go.micro.router.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.UpdateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.UpdateResponse} The clone.
 */
proto.go.micro.router.UpdateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.UpdateResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Event.displayName = 'proto.go.micro.router.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Event} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    timestamp: msg.getTimestamp(),
    route: (f = msg.getRoute()) && proto.go.micro.router.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Event}
 */
proto.go.micro.router.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Event;
  return proto.go.micro.router.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Event}
 */
proto.go.micro.router.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.go.micro.router.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.go.micro.router.Route;
      reader.readMessage(value,proto.go.micro.router.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Event} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Event.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Event.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getRoute();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.go.micro.router.Route.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Event} The clone.
 */
proto.go.micro.router.Event.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Event} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional EventType type = 1;
 * @return {!proto.go.micro.router.EventType}
 */
proto.go.micro.router.Event.prototype.getType = function() {
  return /** @type {!proto.go.micro.router.EventType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.go.micro.router.EventType} value  */
proto.go.micro.router.Event.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.go.micro.router.Event.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.go.micro.router.Event.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Route route = 3;
 * @return {proto.go.micro.router.Route}
 */
proto.go.micro.router.Event.prototype.getRoute = function() {
  return /** @type{proto.go.micro.router.Route} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.router.Route, 3));
};


/** @param {proto.go.micro.router.Route|undefined} value  */
proto.go.micro.router.Event.prototype.setRoute = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.go.micro.router.Event.prototype.clearRoute = function() {
  this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.router.Event.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Query.displayName = 'proto.go.micro.router.Query';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Query} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: msg.getService(),
    gateway: msg.getGateway(),
    network: msg.getNetwork()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Query}
 */
proto.go.micro.router.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Query;
  return proto.go.micro.router.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Query}
 */
proto.go.micro.router.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Query} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Query.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Query.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getGateway();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Query} The clone.
 */
proto.go.micro.router.Query.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Query} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.go.micro.router.Query.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.router.Query.prototype.setService = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string gateway = 2;
 * @return {string}
 */
proto.go.micro.router.Query.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.router.Query.prototype.setGateway = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string network = 3;
 * @return {string}
 */
proto.go.micro.router.Query.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.go.micro.router.Query.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Route.displayName = 'proto.go.micro.router.Route';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Route} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: msg.getService(),
    address: msg.getAddress(),
    gateway: msg.getGateway(),
    network: msg.getNetwork(),
    router: msg.getRouter(),
    link: msg.getLink(),
    metric: msg.getMetric()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Route}
 */
proto.go.micro.router.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Route;
  return proto.go.micro.router.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Route}
 */
proto.go.micro.router.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouter(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Route} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Route.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Route.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getGateway();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getRouter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getLink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getMetric();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Route} The clone.
 */
proto.go.micro.router.Route.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Route} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setService = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string gateway = 3;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setGateway = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string network = 4;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string router = 5;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getRouter = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setRouter = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string link = 6;
 * @return {string}
 */
proto.go.micro.router.Route.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.go.micro.router.Route.prototype.setLink = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 metric = 7;
 * @return {number}
 */
proto.go.micro.router.Route.prototype.getMetric = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.go.micro.router.Route.prototype.setMetric = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.Status.displayName = 'proto.go.micro.router.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.Status} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: msg.getCode(),
    error: msg.getError()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.Status}
 */
proto.go.micro.router.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.Status;
  return proto.go.micro.router.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.Status}
 */
proto.go.micro.router.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.Status} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Status.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.Status.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.Status} The clone.
 */
proto.go.micro.router.Status.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.Status} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.go.micro.router.Status.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.router.Status.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.go.micro.router.Status.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.router.Status.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.router.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.router.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.router.StatusResponse.displayName = 'proto.go.micro.router.StatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.router.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.router.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.router.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.router.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.go.micro.router.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.router.StatusResponse}
 */
proto.go.micro.router.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.router.StatusResponse;
  return proto.go.micro.router.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.router.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.router.StatusResponse}
 */
proto.go.micro.router.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.router.Status;
      reader.readMessage(value,proto.go.micro.router.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.router.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.router.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.router.StatusResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.router.Status.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.router.StatusResponse} The clone.
 */
proto.go.micro.router.StatusResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.router.StatusResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Status status = 1;
 * @return {proto.go.micro.router.Status}
 */
proto.go.micro.router.StatusResponse.prototype.getStatus = function() {
  return /** @type{proto.go.micro.router.Status} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.router.Status, 1));
};


/** @param {proto.go.micro.router.Status|undefined} value  */
proto.go.micro.router.StatusResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.router.StatusResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.router.StatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.go.micro.router.AdvertType = {
  ADVERTANNOUNCE: 0,
  ADVERTUPDATE: 1
};

/**
 * @enum {number}
 */
proto.go.micro.router.EventType = {
  CREATE: 0,
  DELETE: 1,
  UPDATE: 2
};

goog.object.extend(exports, proto.go.micro.router);
