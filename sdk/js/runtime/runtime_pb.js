/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.go.micro.runtime.CreateRequest', null, global);
goog.exportSymbol('proto.go.micro.runtime.CreateResponse', null, global);
goog.exportSymbol('proto.go.micro.runtime.DeleteRequest', null, global);
goog.exportSymbol('proto.go.micro.runtime.DeleteResponse', null, global);
goog.exportSymbol('proto.go.micro.runtime.ListRequest', null, global);
goog.exportSymbol('proto.go.micro.runtime.ListResponse', null, global);
goog.exportSymbol('proto.go.micro.runtime.Options', null, global);
goog.exportSymbol('proto.go.micro.runtime.Service', null, global);
goog.exportSymbol('proto.go.micro.runtime.UpdateRequest', null, global);
goog.exportSymbol('proto.go.micro.runtime.UpdateResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.Service.displayName = 'proto.go.micro.runtime.Service';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.Service} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    version: msg.getVersion(),
    source: msg.getSource(),
    path: msg.getPath(),
    exec: msg.getExec()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.Service}
 */
proto.go.micro.runtime.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.Service;
  return proto.go.micro.runtime.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.Service}
 */
proto.go.micro.runtime.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.Service} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.Service.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.Service.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getExec();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.Service} The clone.
 */
proto.go.micro.runtime.Service.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.Service} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.go.micro.runtime.Service.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Service.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.go.micro.runtime.Service.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Service.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.go.micro.runtime.Service.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Service.prototype.setSource = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.go.micro.runtime.Service.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Service.prototype.setPath = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string exec = 5;
 * @return {string}
 */
proto.go.micro.runtime.Service.prototype.getExec = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Service.prototype.setExec = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.runtime.Options.repeatedFields_, null);
};
goog.inherits(proto.go.micro.runtime.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.Options.displayName = 'proto.go.micro.runtime.Options';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.runtime.Options.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.Options} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: msg.getCommand(),
    envList: jspb.Message.getField(msg, 2),
    output: msg.getOutput()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.Options}
 */
proto.go.micro.runtime.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.Options;
  return proto.go.micro.runtime.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.Options}
 */
proto.go.micro.runtime.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getEnvList().push(value);
      msg.setEnvList(msg.getEnvList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.Options} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.Options.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.Options.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getEnvList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getOutput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.Options} The clone.
 */
proto.go.micro.runtime.Options.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.Options} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.go.micro.runtime.Options.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Options.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string env = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.go.micro.runtime.Options.prototype.getEnvList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.go.micro.runtime.Options.prototype.setEnvList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.go.micro.runtime.Options.prototype.clearEnvList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional string output = 3;
 * @return {string}
 */
proto.go.micro.runtime.Options.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.go.micro.runtime.Options.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.CreateRequest.displayName = 'proto.go.micro.runtime.CreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && proto.go.micro.runtime.Service.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && proto.go.micro.runtime.Options.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.CreateRequest}
 */
proto.go.micro.runtime.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.CreateRequest;
  return proto.go.micro.runtime.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.CreateRequest}
 */
proto.go.micro.runtime.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.runtime.Service;
      reader.readMessage(value,proto.go.micro.runtime.Service.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    case 2:
      var value = new proto.go.micro.runtime.Options;
      reader.readMessage(value,proto.go.micro.runtime.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.CreateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.runtime.Service.serializeBinaryToWriter
    );
  }
  f = this.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.go.micro.runtime.Options.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.CreateRequest} The clone.
 */
proto.go.micro.runtime.CreateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.CreateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Service service = 1;
 * @return {proto.go.micro.runtime.Service}
 */
proto.go.micro.runtime.CreateRequest.prototype.getService = function() {
  return /** @type{proto.go.micro.runtime.Service} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.runtime.Service, 1));
};


/** @param {proto.go.micro.runtime.Service|undefined} value  */
proto.go.micro.runtime.CreateRequest.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.runtime.CreateRequest.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.runtime.CreateRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Options options = 2;
 * @return {proto.go.micro.runtime.Options}
 */
proto.go.micro.runtime.CreateRequest.prototype.getOptions = function() {
  return /** @type{proto.go.micro.runtime.Options} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.runtime.Options, 2));
};


/** @param {proto.go.micro.runtime.Options|undefined} value  */
proto.go.micro.runtime.CreateRequest.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.go.micro.runtime.CreateRequest.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.runtime.CreateRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.CreateResponse.displayName = 'proto.go.micro.runtime.CreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.CreateResponse}
 */
proto.go.micro.runtime.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.CreateResponse;
  return proto.go.micro.runtime.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.CreateResponse}
 */
proto.go.micro.runtime.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.CreateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.CreateResponse} The clone.
 */
proto.go.micro.runtime.CreateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.CreateResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.DeleteRequest.displayName = 'proto.go.micro.runtime.DeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && proto.go.micro.runtime.Service.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.DeleteRequest}
 */
proto.go.micro.runtime.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.DeleteRequest;
  return proto.go.micro.runtime.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.DeleteRequest}
 */
proto.go.micro.runtime.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.runtime.Service;
      reader.readMessage(value,proto.go.micro.runtime.Service.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.DeleteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.runtime.Service.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.DeleteRequest} The clone.
 */
proto.go.micro.runtime.DeleteRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.DeleteRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Service service = 1;
 * @return {proto.go.micro.runtime.Service}
 */
proto.go.micro.runtime.DeleteRequest.prototype.getService = function() {
  return /** @type{proto.go.micro.runtime.Service} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.runtime.Service, 1));
};


/** @param {proto.go.micro.runtime.Service|undefined} value  */
proto.go.micro.runtime.DeleteRequest.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.runtime.DeleteRequest.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.runtime.DeleteRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.DeleteResponse.displayName = 'proto.go.micro.runtime.DeleteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.DeleteResponse}
 */
proto.go.micro.runtime.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.DeleteResponse;
  return proto.go.micro.runtime.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.DeleteResponse}
 */
proto.go.micro.runtime.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.DeleteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.DeleteResponse} The clone.
 */
proto.go.micro.runtime.DeleteResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.DeleteResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.UpdateRequest.displayName = 'proto.go.micro.runtime.UpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.UpdateRequest}
 */
proto.go.micro.runtime.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.UpdateRequest;
  return proto.go.micro.runtime.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.UpdateRequest}
 */
proto.go.micro.runtime.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.UpdateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.UpdateRequest} The clone.
 */
proto.go.micro.runtime.UpdateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.UpdateRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.UpdateResponse.displayName = 'proto.go.micro.runtime.UpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.UpdateResponse}
 */
proto.go.micro.runtime.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.UpdateResponse;
  return proto.go.micro.runtime.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.UpdateResponse}
 */
proto.go.micro.runtime.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.UpdateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.UpdateResponse} The clone.
 */
proto.go.micro.runtime.UpdateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.UpdateResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.ListRequest.displayName = 'proto.go.micro.runtime.ListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.ListRequest}
 */
proto.go.micro.runtime.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.ListRequest;
  return proto.go.micro.runtime.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.ListRequest}
 */
proto.go.micro.runtime.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.ListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.ListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.ListRequest} The clone.
 */
proto.go.micro.runtime.ListRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.ListRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.runtime.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.runtime.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.runtime.ListResponse.displayName = 'proto.go.micro.runtime.ListResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.runtime.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.runtime.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.runtime.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.runtime.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.runtime.ListResponse}
 */
proto.go.micro.runtime.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.runtime.ListResponse;
  return proto.go.micro.runtime.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.runtime.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.runtime.ListResponse}
 */
proto.go.micro.runtime.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.runtime.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.ListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.runtime.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.runtime.ListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.runtime.ListResponse} The clone.
 */
proto.go.micro.runtime.ListResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.runtime.ListResponse} */ (jspb.Message.cloneMessage(this));
};


goog.object.extend(exports, proto.go.micro.runtime);
