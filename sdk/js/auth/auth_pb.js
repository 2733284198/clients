/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.go.micro.auth.Account', null, global);
goog.exportSymbol('proto.go.micro.auth.GenerateRequest', null, global);
goog.exportSymbol('proto.go.micro.auth.GenerateResponse', null, global);
goog.exportSymbol('proto.go.micro.auth.GrantRequest', null, global);
goog.exportSymbol('proto.go.micro.auth.GrantResponse', null, global);
goog.exportSymbol('proto.go.micro.auth.InspectRequest', null, global);
goog.exportSymbol('proto.go.micro.auth.InspectResponse', null, global);
goog.exportSymbol('proto.go.micro.auth.RefreshRequest', null, global);
goog.exportSymbol('proto.go.micro.auth.RefreshResponse', null, global);
goog.exportSymbol('proto.go.micro.auth.Resource', null, global);
goog.exportSymbol('proto.go.micro.auth.RevokeRequest', null, global);
goog.exportSymbol('proto.go.micro.auth.RevokeResponse', null, global);
goog.exportSymbol('proto.go.micro.auth.Token', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.auth.Token.repeatedFields_, null);
};
goog.inherits(proto.go.micro.auth.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.Token.displayName = 'proto.go.micro.auth.Token';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.auth.Token.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.Token} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken(),
    type: msg.getType(),
    created: msg.getCreated(),
    expiry: msg.getExpiry(),
    subject: msg.getSubject(),
    rolesList: jspb.Message.getField(msg, 6),
    metadataMap: (f = msg.getMetadataMap(true)) ? f.toArray() : [],
    namespace: msg.getNamespace()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.Token}
 */
proto.go.micro.auth.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.Token;
  return proto.go.micro.auth.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.Token}
 */
proto.go.micro.auth.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiry(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.getRolesList().push(value);
      msg.setRolesList(msg.getRolesList());
      break;
    case 7:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.Token} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Token.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Token.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getExpiry();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getSubject();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = this.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = this.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.Token} The clone.
 */
proto.go.micro.auth.Token.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.Token} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.go.micro.auth.Token.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Token.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.go.micro.auth.Token.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Token.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 created = 3;
 * @return {number}
 */
proto.go.micro.auth.Token.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.go.micro.auth.Token.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 expiry = 4;
 * @return {number}
 */
proto.go.micro.auth.Token.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.go.micro.auth.Token.prototype.setExpiry = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string subject = 5;
 * @return {string}
 */
proto.go.micro.auth.Token.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Token.prototype.setSubject = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated string roles = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.go.micro.auth.Token.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 6));
};


/** @param {Array.<string>} value  */
proto.go.micro.auth.Token.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


proto.go.micro.auth.Token.prototype.clearRolesList = function() {
  jspb.Message.setField(this, 6, []);
};


/**
 * map<string, string> metadata = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.go.micro.auth.Token.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * optional string namespace = 8;
 * @return {string}
 */
proto.go.micro.auth.Token.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Token.prototype.setNamespace = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.auth.Account.repeatedFields_, null);
};
goog.inherits(proto.go.micro.auth.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.Account.displayName = 'proto.go.micro.auth.Account';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.auth.Account.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.Account} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    secret: (f = msg.getSecret()) && proto.go.micro.auth.Token.toObject(includeInstance, f),
    rolesList: jspb.Message.getField(msg, 3),
    metadataMap: (f = msg.getMetadataMap(true)) ? f.toArray() : [],
    namespace: msg.getNamespace()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.Account}
 */
proto.go.micro.auth.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.Account;
  return proto.go.micro.auth.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.Account}
 */
proto.go.micro.auth.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.go.micro.auth.Token;
      reader.readMessage(value,proto.go.micro.auth.Token.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getRolesList().push(value);
      msg.setRolesList(msg.getRolesList());
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.Account} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Account.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Account.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.go.micro.auth.Token.serializeBinaryToWriter
    );
  }
  f = this.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = this.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = this.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.Account} The clone.
 */
proto.go.micro.auth.Account.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.Account} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.go.micro.auth.Account.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Account.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Token secret = 2;
 * @return {proto.go.micro.auth.Token}
 */
proto.go.micro.auth.Account.prototype.getSecret = function() {
  return /** @type{proto.go.micro.auth.Token} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Token, 2));
};


/** @param {proto.go.micro.auth.Token|undefined} value  */
proto.go.micro.auth.Account.prototype.setSecret = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.go.micro.auth.Account.prototype.clearSecret = function() {
  this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.Account.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string roles = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.go.micro.auth.Account.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>} value  */
proto.go.micro.auth.Account.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.go.micro.auth.Account.prototype.clearRolesList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.go.micro.auth.Account.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * optional string namespace = 5;
 * @return {string}
 */
proto.go.micro.auth.Account.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Account.prototype.setNamespace = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.Resource.displayName = 'proto.go.micro.auth.Resource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.Resource} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    type: msg.getType(),
    endpoint: msg.getEndpoint()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.Resource}
 */
proto.go.micro.auth.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.Resource;
  return proto.go.micro.auth.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.Resource}
 */
proto.go.micro.auth.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.Resource} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Resource.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.Resource.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.Resource} The clone.
 */
proto.go.micro.auth.Resource.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.Resource} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.go.micro.auth.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Resource.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.go.micro.auth.Resource.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Resource.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string endpoint = 3;
 * @return {string}
 */
proto.go.micro.auth.Resource.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.go.micro.auth.Resource.prototype.setEndpoint = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.GenerateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.go.micro.auth.GenerateRequest.repeatedFields_, null);
};
goog.inherits(proto.go.micro.auth.GenerateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.GenerateRequest.displayName = 'proto.go.micro.auth.GenerateRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.go.micro.auth.GenerateRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.GenerateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.GenerateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.GenerateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.GenerateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    rolesList: jspb.Message.getField(msg, 2),
    metadataMap: (f = msg.getMetadataMap(true)) ? f.toArray() : [],
    secretExpiry: msg.getSecretExpiry(),
    namespace: msg.getNamespace()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.GenerateRequest}
 */
proto.go.micro.auth.GenerateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.GenerateRequest;
  return proto.go.micro.auth.GenerateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.GenerateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.GenerateRequest}
 */
proto.go.micro.auth.GenerateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getRolesList().push(value);
      msg.setRolesList(msg.getRolesList());
      break;
    case 3:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSecretExpiry(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.GenerateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GenerateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.GenerateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GenerateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = this.getSecretExpiry();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.GenerateRequest} The clone.
 */
proto.go.micro.auth.GenerateRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.GenerateRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.go.micro.auth.GenerateRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.GenerateRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string roles = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.go.micro.auth.GenerateRequest.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.go.micro.auth.GenerateRequest.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.go.micro.auth.GenerateRequest.prototype.clearRolesList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * map<string, string> metadata = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.go.micro.auth.GenerateRequest.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * optional int64 secret_expiry = 4;
 * @return {number}
 */
proto.go.micro.auth.GenerateRequest.prototype.getSecretExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.go.micro.auth.GenerateRequest.prototype.setSecretExpiry = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string namespace = 5;
 * @return {string}
 */
proto.go.micro.auth.GenerateRequest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.go.micro.auth.GenerateRequest.prototype.setNamespace = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.GenerateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.GenerateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.GenerateResponse.displayName = 'proto.go.micro.auth.GenerateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.GenerateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.GenerateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.GenerateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.GenerateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && proto.go.micro.auth.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.GenerateResponse}
 */
proto.go.micro.auth.GenerateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.GenerateResponse;
  return proto.go.micro.auth.GenerateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.GenerateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.GenerateResponse}
 */
proto.go.micro.auth.GenerateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.auth.Account;
      reader.readMessage(value,proto.go.micro.auth.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.GenerateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GenerateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.GenerateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GenerateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.auth.Account.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.GenerateResponse} The clone.
 */
proto.go.micro.auth.GenerateResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.GenerateResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Account account = 1;
 * @return {proto.go.micro.auth.Account}
 */
proto.go.micro.auth.GenerateResponse.prototype.getAccount = function() {
  return /** @type{proto.go.micro.auth.Account} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Account, 1));
};


/** @param {proto.go.micro.auth.Account|undefined} value  */
proto.go.micro.auth.GenerateResponse.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.auth.GenerateResponse.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.GenerateResponse.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.GrantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.GrantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.GrantRequest.displayName = 'proto.go.micro.auth.GrantRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.GrantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.GrantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.GrantRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.GrantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: msg.getRole(),
    resource: (f = msg.getResource()) && proto.go.micro.auth.Resource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.GrantRequest}
 */
proto.go.micro.auth.GrantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.GrantRequest;
  return proto.go.micro.auth.GrantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.GrantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.GrantRequest}
 */
proto.go.micro.auth.GrantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = new proto.go.micro.auth.Resource;
      reader.readMessage(value,proto.go.micro.auth.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.GrantRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GrantRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.GrantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GrantRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getResource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.go.micro.auth.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.GrantRequest} The clone.
 */
proto.go.micro.auth.GrantRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.GrantRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string role = 1;
 * @return {string}
 */
proto.go.micro.auth.GrantRequest.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.GrantRequest.prototype.setRole = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Resource resource = 2;
 * @return {proto.go.micro.auth.Resource}
 */
proto.go.micro.auth.GrantRequest.prototype.getResource = function() {
  return /** @type{proto.go.micro.auth.Resource} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Resource, 2));
};


/** @param {proto.go.micro.auth.Resource|undefined} value  */
proto.go.micro.auth.GrantRequest.prototype.setResource = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.go.micro.auth.GrantRequest.prototype.clearResource = function() {
  this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.GrantRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.GrantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.GrantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.GrantResponse.displayName = 'proto.go.micro.auth.GrantResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.GrantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.GrantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.GrantResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.GrantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.GrantResponse}
 */
proto.go.micro.auth.GrantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.GrantResponse;
  return proto.go.micro.auth.GrantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.GrantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.GrantResponse}
 */
proto.go.micro.auth.GrantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.GrantResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GrantResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.GrantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.GrantResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.GrantResponse} The clone.
 */
proto.go.micro.auth.GrantResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.GrantResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.RevokeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.RevokeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.RevokeRequest.displayName = 'proto.go.micro.auth.RevokeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.RevokeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.RevokeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.RevokeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.RevokeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: msg.getRole(),
    resource: (f = msg.getResource()) && proto.go.micro.auth.Resource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.RevokeRequest}
 */
proto.go.micro.auth.RevokeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.RevokeRequest;
  return proto.go.micro.auth.RevokeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.RevokeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.RevokeRequest}
 */
proto.go.micro.auth.RevokeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = new proto.go.micro.auth.Resource;
      reader.readMessage(value,proto.go.micro.auth.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.RevokeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RevokeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.RevokeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RevokeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getResource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.go.micro.auth.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.RevokeRequest} The clone.
 */
proto.go.micro.auth.RevokeRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.RevokeRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string role = 1;
 * @return {string}
 */
proto.go.micro.auth.RevokeRequest.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.RevokeRequest.prototype.setRole = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Resource resource = 2;
 * @return {proto.go.micro.auth.Resource}
 */
proto.go.micro.auth.RevokeRequest.prototype.getResource = function() {
  return /** @type{proto.go.micro.auth.Resource} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Resource, 2));
};


/** @param {proto.go.micro.auth.Resource|undefined} value  */
proto.go.micro.auth.RevokeRequest.prototype.setResource = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.go.micro.auth.RevokeRequest.prototype.clearResource = function() {
  this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.RevokeRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.RevokeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.RevokeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.RevokeResponse.displayName = 'proto.go.micro.auth.RevokeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.RevokeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.RevokeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.RevokeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.RevokeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.RevokeResponse}
 */
proto.go.micro.auth.RevokeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.RevokeResponse;
  return proto.go.micro.auth.RevokeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.RevokeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.RevokeResponse}
 */
proto.go.micro.auth.RevokeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.RevokeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RevokeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.RevokeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RevokeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.RevokeResponse} The clone.
 */
proto.go.micro.auth.RevokeResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.RevokeResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.InspectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.InspectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.InspectRequest.displayName = 'proto.go.micro.auth.InspectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.InspectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.InspectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.InspectRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.InspectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: msg.getToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.InspectRequest}
 */
proto.go.micro.auth.InspectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.InspectRequest;
  return proto.go.micro.auth.InspectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.InspectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.InspectRequest}
 */
proto.go.micro.auth.InspectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.InspectRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.InspectRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.InspectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.InspectRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.InspectRequest} The clone.
 */
proto.go.micro.auth.InspectRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.InspectRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.go.micro.auth.InspectRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.InspectRequest.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.InspectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.InspectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.InspectResponse.displayName = 'proto.go.micro.auth.InspectResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.InspectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.InspectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.InspectResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.InspectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && proto.go.micro.auth.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.InspectResponse}
 */
proto.go.micro.auth.InspectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.InspectResponse;
  return proto.go.micro.auth.InspectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.InspectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.InspectResponse}
 */
proto.go.micro.auth.InspectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.auth.Account;
      reader.readMessage(value,proto.go.micro.auth.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.InspectResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.InspectResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.InspectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.InspectResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.auth.Account.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.InspectResponse} The clone.
 */
proto.go.micro.auth.InspectResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.InspectResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Account account = 1;
 * @return {proto.go.micro.auth.Account}
 */
proto.go.micro.auth.InspectResponse.prototype.getAccount = function() {
  return /** @type{proto.go.micro.auth.Account} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Account, 1));
};


/** @param {proto.go.micro.auth.Account|undefined} value  */
proto.go.micro.auth.InspectResponse.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.auth.InspectResponse.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.InspectResponse.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.RefreshRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.RefreshRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.RefreshRequest.displayName = 'proto.go.micro.auth.RefreshRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.RefreshRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.RefreshRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.RefreshRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.RefreshRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secret: msg.getSecret(),
    tokenExpiry: msg.getTokenExpiry()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.RefreshRequest}
 */
proto.go.micro.auth.RefreshRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.RefreshRequest;
  return proto.go.micro.auth.RefreshRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.RefreshRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.RefreshRequest}
 */
proto.go.micro.auth.RefreshRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTokenExpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.RefreshRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RefreshRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.RefreshRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RefreshRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTokenExpiry();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.RefreshRequest} The clone.
 */
proto.go.micro.auth.RefreshRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.RefreshRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string secret = 1;
 * @return {string}
 */
proto.go.micro.auth.RefreshRequest.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.go.micro.auth.RefreshRequest.prototype.setSecret = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 token_expiry = 2;
 * @return {number}
 */
proto.go.micro.auth.RefreshRequest.prototype.getTokenExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.go.micro.auth.RefreshRequest.prototype.setTokenExpiry = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.go.micro.auth.RefreshResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.go.micro.auth.RefreshResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.go.micro.auth.RefreshResponse.displayName = 'proto.go.micro.auth.RefreshResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.go.micro.auth.RefreshResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.go.micro.auth.RefreshResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.go.micro.auth.RefreshResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.go.micro.auth.RefreshResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.go.micro.auth.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.go.micro.auth.RefreshResponse}
 */
proto.go.micro.auth.RefreshResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.go.micro.auth.RefreshResponse;
  return proto.go.micro.auth.RefreshResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.go.micro.auth.RefreshResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.go.micro.auth.RefreshResponse}
 */
proto.go.micro.auth.RefreshResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.go.micro.auth.Token;
      reader.readMessage(value,proto.go.micro.auth.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.go.micro.auth.RefreshResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RefreshResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.go.micro.auth.RefreshResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.go.micro.auth.RefreshResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.go.micro.auth.Token.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.go.micro.auth.RefreshResponse} The clone.
 */
proto.go.micro.auth.RefreshResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.go.micro.auth.RefreshResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Token token = 1;
 * @return {proto.go.micro.auth.Token}
 */
proto.go.micro.auth.RefreshResponse.prototype.getToken = function() {
  return /** @type{proto.go.micro.auth.Token} */ (
    jspb.Message.getWrapperField(this, proto.go.micro.auth.Token, 1));
};


/** @param {proto.go.micro.auth.Token|undefined} value  */
proto.go.micro.auth.RefreshResponse.prototype.setToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.go.micro.auth.RefreshResponse.prototype.clearToken = function() {
  this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.go.micro.auth.RefreshResponse.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.go.micro.auth);
